<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-16T16:31:01+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Pharath Palesuvaran</title><subtitle>Deep Learning and Self-Driving Cars.</subtitle><author><name>Pharath Palesuvaran</name></author><entry><title type="html">HTML Notes</title><link href="http://localhost:4000/notes/notes-html/" rel="alternate" type="text/html" title="HTML Notes" /><published>2022-10-10T00:00:00+02:00</published><updated>2022-10-10T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-html</id><content type="html" xml:base="http://localhost:4000/notes/notes-html/">&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h1&gt;

&lt;p&gt;Jekyll is written in Ruby.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/ruby-101/&quot;&gt;Ruby 101&lt;/a&gt; explains:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Gems&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Gems are code you can include in Ruby projects&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://rubygems.org/&quot;&gt;Ruby gems search&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems&quot;&gt;Ruby gems list&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Jekyll&lt;/strong&gt; is a gem.&lt;/li&gt;
          &lt;li&gt;Many &lt;strong&gt;Jekyll plugins&lt;/strong&gt; are also gems, including jekyll-feed, jekyll-seo-tag and jekyll-archives.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Gemfile&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;a list of gems used by your site. Every Jekyll site has a Gemfile in the main folder.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Bundler&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Bundler is a gem that installs all gems in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo apt-get install ruby-full&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo apt install rubygems-integration&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;nicht nötig, wenn ruby-full installiert wurde&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo gem install bundler&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo gem install jekyll&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Seite funktioniert nicht richtig, wenn dieses Gem &lt;strong&gt;nicht&lt;/strong&gt; installiert wurde (z.B. bei Seitenvergrößerung über ctrl - + werden die einzelnen Teile der Seite nicht automatisch ausgerichtet)!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo bundle install&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;im github-pages repo &lt;strong&gt;root&lt;/strong&gt; folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bundle exec jekyll serve&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;warten bis “Server running… press ctrl-c to stop.” message und dann ctrl gedrückt halten und auf server address clicken (oder in Browser “http://localhost:4000” aufrufen)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;create-a-new-site&quot;&gt;Create a new site&lt;/h2&gt;

&lt;p&gt;To create a new Jekyll site at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./myblog&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Create a new Jekyll site
jekyll new myblog

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog

// Build the site and make it available on a &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;server
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id=&quot;markdown-syntax&quot;&gt;Markdown Syntax&lt;/h3&gt;

&lt;h4 id=&quot;code-blocks&quot;&gt;Code Blocks&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liquid Exception: Liquid syntax error &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;line 194&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Variable &lt;span class=&quot;s1&quot;&gt;'double-{-without-whitespace'&lt;/span&gt; was not properly terminated with regexp: /&lt;span class=&quot;se&quot;&gt;\}\}&lt;/span&gt;/ &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/bra-ket/git/pharath.github.io/_posts/2022-09-22-notes-c.md
             Error: Liquid syntax error &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;line 194&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Variable &lt;span class=&quot;s1&quot;&gt;'double-{-without-whitespace'&lt;/span&gt; was not properly terminated with regexp: /&lt;span class=&quot;se&quot;&gt;\}\}&lt;/span&gt;/
             Error: Run jekyll build &lt;span class=&quot;nt&quot;&gt;--trace&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;do &lt;strong&gt;not&lt;/strong&gt; use {{, use { {, i.e. there &lt;strong&gt;must&lt;/strong&gt; be a whitespace between the two curly brackets!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;anchor-points&quot;&gt;Anchor Points&lt;/h1&gt;

&lt;p&gt;from: &lt;a href=&quot;https://superuser.com/a/382083&quot;&gt;superuser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The vanilla way link to somewhere in-page is via an &lt;a href=&quot;https://www.w3.org/TR/html4/struct/links.html#h-12.2&quot;&gt;anchor point&lt;/a&gt; already present in the page.&lt;/p&gt;

&lt;p&gt;This can be created using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;…&amp;lt;/a&amp;gt;&lt;/code&gt; tag. Note that the link specified in “anchor point” (above) has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#h-12.2&lt;/code&gt; at the end. This corresponds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a id=&quot;h-12.2&quot;&amp;gt;12.2&amp;lt;/a&amp;gt;&lt;/code&gt; embedded in the HTML forming the page, and when clicked will reposition the page view to this anchor.&lt;/p&gt;

&lt;p&gt;Note that prior to HTML5, the name attribute was used in the anchor tag, but is no longer supported and the id attribute should be used in its place (&lt;a href=&quot;https://www.w3schools.com/tags/tag_a.asp&quot;&gt;reference&lt;/a&gt;). This also means that you can use any element for an anchor tag, you are not limited to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2 id=&quot;beispiel&quot;&gt;Beispiel&lt;/h2&gt;

&lt;p&gt;“https://github.com/infokiller/web-search-navigator#keybindings” springt direkt auf &lt;strong&gt;anchor point&lt;/strong&gt; “keybindings”, der folgendermaßen aussieht:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-content-keybindings&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anchor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#keybindings&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;octicon octicon-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 16 16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill-rule=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;evenodd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="html" /><category term="notes" /><summary type="html">For learning html.</summary></entry><entry><title type="html">C++ Notes</title><link href="http://localhost:4000/notes/notes-cpp/" rel="alternate" type="text/html" title="C++ Notes" /><published>2022-10-06T00:00:00+02:00</published><updated>2022-10-06T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-cpp</id><content type="html" xml:base="http://localhost:4000/notes/notes-cpp/">&lt;h1 id=&quot;definitions&quot;&gt;DEFINITIONS&lt;/h1&gt;

&lt;h2 id=&quot;areas-of-memory&quot;&gt;areas of memory&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; - Local variables, function parameters&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;code space&lt;/strong&gt; - Code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;global namespace&lt;/strong&gt; - global variables&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;registers&lt;/strong&gt; - used for internal housekeeping functions, such as keeping track of the top of the stack and the instruction pointer&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;free store = heap&lt;/strong&gt; - Just about all of the remaining memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;expressions-literals&quot;&gt;Expressions, literals&lt;/h2&gt;

&lt;p&gt;https://en.cppreference.com/w/cpp/language/expressions&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;expression&lt;/strong&gt; := sequence of &lt;strong&gt;operators&lt;/strong&gt; and their &lt;strong&gt;operands&lt;/strong&gt;, that specifies a computation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;primary expression&lt;/strong&gt; := literals, Id-expressions, lambda-expressions, fold-expressions, requires-expressions
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;literals&lt;/strong&gt; := the tokens of a C++ program that represent &lt;strong&gt;constant&lt;/strong&gt; values [=Konstanten] (dh alle Zeichen, die man “nicht ändern kann”)
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;integer literals&lt;/strong&gt; (eg 1, 2, 3 …)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;character literals&lt;/strong&gt; (eg einzelne Buchstaben)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;boolean literals&lt;/strong&gt; (true und false)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;nullptr&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nullptr ist ein &lt;strong&gt;literal&lt;/strong&gt; (s.o.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;C++ &lt;strong&gt;expression properties&lt;/strong&gt;: “&lt;em&gt;each C++ expression is characterized by two independent properties&lt;/em&gt;”
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Value categories:&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Primary categories:&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;prvalue expression&lt;/strong&gt; (eg literals (s.o.), arithmetic expressions [&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;,…], …)&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;xvalue expression&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;lvalue expression&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Mixed categories:&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;glvalue expression&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;rvalue expression&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-using-keyword&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt; keyword&lt;/h1&gt;

&lt;p&gt;Using the namespace designation is &lt;strong&gt;good form&lt;/strong&gt; because, if you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using namespace some_namespace&lt;/code&gt;, you run the risk of inadvertently using objects from the wrong library. This takes some &lt;strong&gt;effort to fix&lt;/strong&gt;, whereas using the namespace designation cannot lead to such conflicts (see &lt;a href=&quot;https://stackoverflow.com/a/1452738&quot;&gt;example&lt;/a&gt;). I.e. from a &lt;strong&gt;maintenance&lt;/strong&gt; perspective using the namespace designation is best practice.&lt;/p&gt;

&lt;h1 id=&quot;nullpointer-nullptr-null&quot;&gt;Nullpointer: nullptr, NULL&lt;/h1&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.stroustrup.com/bs_faq2.html#null&quot;&gt;Bjarne Stroustrup comment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc++/manual/support.html#std.support.types.null&quot;&gt;g++ doc&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; ist definiert als &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Macros.html&quot;&gt;macro&lt;/a&gt; (i.e. a piece of code in a program that is replaced by the value of the macro; a macro is defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt; directive; whenever a macro name is encountered by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Preprocessor&quot;&gt;preprocessor&lt;/a&gt;, it replaces the name with the definition of the macro):
    &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define NULL 0
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//since C++11&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define NULL nullptr
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(from &lt;a href=&quot;https://en.cppreference.com/w/cpp/types/NULL&quot;&gt;cppreference&lt;/a&gt;)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;dh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; und &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; waren früher &lt;strong&gt;dasselbe&lt;/strong&gt; [bis C++11] und jetzt sind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; und &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; &lt;strong&gt;dasselbe&lt;/strong&gt; (aber how come &lt;a href=&quot;#implicit-cast-of-null-and-nullptr&quot;&gt;implicit cast difference&lt;/a&gt;?)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“Unless you need to be compatible with C++98/C++03 or C you should prefer to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.” (&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc++/manual/support.html#std.support.types.null&quot;&gt;g++ doc&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implicit-cast-of-null-and-nullptr&quot;&gt;Implicit Cast of NULL and nullptr&lt;/h2&gt;

&lt;h3 id=&quot;to-pointer-types&quot;&gt;To Pointer Types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; und &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; beide implicitly convertible to any &lt;strong&gt;pointer&lt;/strong&gt; type
    &lt;ul&gt;
      &lt;li&gt;A &lt;strong&gt;null pointer&lt;/strong&gt; constant (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;), can be converted to any &lt;strong&gt;pointer&lt;/strong&gt; type [i.e. type with asterisk &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;], and the result is the null pointer value of that type. (&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/implicit_conversion&quot;&gt;cppreference&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-integral-types&quot;&gt;To Integral Types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; implicitly convertible or comparable to integral types [e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;] (&lt;a href=&quot;https://www.geeksforgeeks.org/understanding-nullptr-c/&quot;&gt;geeksforgeeks&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int x = NULL&lt;/code&gt; geht;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int x = nullptr&lt;/code&gt; geht &lt;strong&gt;nicht&lt;/strong&gt;!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; is of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr_t&lt;/code&gt;, which is implicitly convertible and comparable to any pointer type or pointer-to-member type. &lt;strong&gt;It is not implicitly convertible or comparable to integral types&lt;/strong&gt; [e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;], &lt;strong&gt;except for&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool&lt;/code&gt;. (&lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B11#Null_pointer_constant&quot;&gt;C++11&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;type-of-null-and-nullptr&quot;&gt;Type of NULL and nullptr&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“In C, the macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; may have the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt;, but that is not allowed in C++.” (&lt;a href=&quot;https://en.cppreference.com/w/cpp/types/NULL&quot;&gt;cppreference&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;how come?: &lt;a href=&quot;https://stackoverflow.com/a/69057243&quot;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;soll heißen: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; hat in C++ &lt;strong&gt;absichtlich nicht (wie in C)&lt;/strong&gt; den Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt;, weil there is no &lt;strong&gt;implicit cast&lt;/strong&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt; to any other type in C++ (in C wäre das aber möglich!). Bis C++11 war &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; das &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/integer_literal&quot;&gt;integer literal&lt;/a&gt; “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;”, konnte damit also einen der integer literal types (s. Tabelle in &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/integer_literal&quot;&gt;integer literal&lt;/a&gt;) haben. Seit C++11 hat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; den type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr_t&lt;/code&gt; (&lt;a href=&quot;https://en.cppreference.com/w/cpp/types/nullptr_t&quot;&gt;doc&lt;/a&gt;).&lt;br /&gt;
(dh zB
        &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// this implicit cast is not allowed in C++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;gibt einen Compiler Error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error: ‘void*’ is not a pointer-to-object type&lt;/code&gt; &lt;br /&gt;
(&lt;strong&gt;fix&lt;/strong&gt;: use a different type (a “pointer-to-object” type) instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt; -  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void*&lt;/code&gt; is a “pointer-to-nothing”) &lt;br /&gt;
Aber&lt;/p&gt;
        &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;gibt keinen Compiler Error, weil &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char*&lt;/code&gt; ein pointer-to-object type ist.)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;templates&quot;&gt;Templates&lt;/h1&gt;

&lt;h2 id=&quot;syntax&quot;&gt;SYNTAX&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Function Template&lt;/strong&gt;:	(phth: besser als overloading, weil man nicht x mal dieselbe Funktion definieren muss)&lt;/p&gt;

&lt;p&gt;(https://www.cplusplus.com/doc/oldtutorial/templates/)&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// function template&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Function templates are special functions that can operate with &lt;strong&gt;generic types&lt;/strong&gt;. This allows us to create a function 
template whose functionality can be adapted to more than one type or class without repeating the entire code for each type.&lt;/p&gt;

&lt;p&gt;In C++ this can be achieved using &lt;strong&gt;template parameters&lt;/strong&gt;. A template parameter is a special kind of parameter that 
can be used to pass a type as argument: just like regular function parameters can be used to pass values to a function, 
template parameters allow to pass also types to a function. These function templates can use these parameters as if 
they were any other regular type.&lt;/p&gt;

&lt;h1 id=&quot;overloading&quot;&gt;Overloading&lt;/h1&gt;

&lt;p&gt;(https://www.tutorialspoint.com/cplusplus/cpp_overloading.htm)&lt;/p&gt;

&lt;p&gt;C++ allows you to specify more than one definition for a &lt;strong&gt;function&lt;/strong&gt; name or an &lt;strong&gt;operator&lt;/strong&gt; in the same scope, which is called &lt;strong&gt;function overloading&lt;/strong&gt; and &lt;strong&gt;operator overloading&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;An overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation). When you call an overloaded &lt;strong&gt;function&lt;/strong&gt; or &lt;strong&gt;operator&lt;/strong&gt;, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called &lt;strong&gt;overload resolution&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;double-colon-prepended-to-the-class-name&quot;&gt;Double Colon prepended to the class name&lt;/h1&gt;

&lt;p&gt;(https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon)
This ensures that resolution occurs from the global namespace, instead of starting at the namespace you’re currently in. For instance, if you had two different classes called “&lt;strong&gt;Configuration&lt;/strong&gt;” as such:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// class 1, in global namespace&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// class 2, different from class 1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// resolves to MyApp::Configuration, class 2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;// resolves to top-level Configuration, class 1&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Basically, it allows you to traverse up to the global namespace since your name might get clobbered by a new definition inside another namespace, in this case “&lt;strong&gt;MyApp&lt;/strong&gt;”.&lt;/p&gt;

&lt;h1 id=&quot;argc-argv&quot;&gt;argc, argv&lt;/h1&gt;

&lt;p&gt;https://stackoverflow.com/questions/3024197/what-does-int-argc-char-argv-mean&lt;/p&gt;

&lt;h1 id=&quot;strings&quot;&gt;Strings&lt;/h1&gt;

&lt;h2 id=&quot;c_str&quot;&gt;.c_str()&lt;/h2&gt;

&lt;p&gt;https://stackoverflow.com/questions/7416445/what-is-use-of-c-str-function-in-c
(s. Antwort von hkBattousai)&lt;/p&gt;

&lt;h2 id=&quot;format-specifiers&quot;&gt;Format Specifiers&lt;/h2&gt;

&lt;p&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%f&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%.3f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;https://www.cprogramming.com/tutorial/printf-format-strings.html&lt;/p&gt;

&lt;h1 id=&quot;typedef-struct&quot;&gt;typedef struct&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/252780/why-should-we-typedef-a-struct-so-often-in-c&quot;&gt;Why should we typedef a struct so often in C? - Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="c++" /><category term="notes" /><summary type="html">For learning C++</summary></entry><entry><title type="html">Android Cheatsheet</title><link href="http://localhost:4000/cheatsheet/cheatsheet-android/" rel="alternate" type="text/html" title="Android Cheatsheet" /><published>2022-10-04T00:00:00+02:00</published><updated>2022-10-04T00:00:00+02:00</updated><id>http://localhost:4000/cheatsheet/cheatsheet-android</id><content type="html" xml:base="http://localhost:4000/cheatsheet/cheatsheet-android/">&lt;h1 id=&quot;file-transfer&quot;&gt;File Transfer&lt;/h1&gt;

&lt;h2 id=&quot;android-9&quot;&gt;Android 9&lt;/h2&gt;

&lt;h3 id=&quot;to-ubuntu&quot;&gt;To Ubuntu&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TODO&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Cheatsheet" /><category term="android" /><category term="cheatsheet" /><summary type="html">Useful tips for using Android</summary></entry><entry><title type="html">Software Engineering Notes</title><link href="http://localhost:4000/notes/notes-SE/" rel="alternate" type="text/html" title="Software Engineering Notes" /><published>2022-10-03T00:00:00+02:00</published><updated>2022-10-03T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-SE</id><content type="html" xml:base="http://localhost:4000/notes/notes-SE/">&lt;h1 id=&quot;advanced-software-engineering-in-mechanical-engineering&quot;&gt;Advanced Software Engineering (in Mechanical Engineering)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The aim of the course is to explain students for what purposes, under which conditions and with which consequences computer systems are used for the solution of problems &lt;strong&gt;related to Mechanical Engineering&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Within the first part of the course the steps from problem description to the final software solution are illustrated. This covers the topics
    &lt;ul&gt;
      &lt;li&gt;modelling,&lt;/li&gt;
      &lt;li&gt;problem elicitation and analysis,&lt;/li&gt;
      &lt;li&gt;program design and&lt;/li&gt;
      &lt;li&gt;an introduction to UML (Unified Modelling Language).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Then the course goes on with a closer examination of the various aspects which comprise software development, concerning with topics like
    &lt;ul&gt;
      &lt;li&gt;design patterns,&lt;/li&gt;
      &lt;li&gt;agile software processes and&lt;/li&gt;
      &lt;li&gt;project management.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Parallel to the lecture the students are given the chance to employ the theoretical input from the course in small software projects.&lt;/li&gt;
  &lt;li&gt;After an &lt;strong&gt;introduction to the basics of Java&lt;/strong&gt; and object-oriented programming, the students stepwise pass through the particular stages of a software development process.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="software_engineering" /><category term="notes" /><summary type="html">Software Engineering Basics</summary></entry><entry><title type="html">WSL2 Cheatsheet</title><link href="http://localhost:4000/cheatsheet/cheatsheet-wsl2/" rel="alternate" type="text/html" title="WSL2 Cheatsheet" /><published>2022-09-22T00:00:00+02:00</published><updated>2022-09-22T00:00:00+02:00</updated><id>http://localhost:4000/cheatsheet/cheatsheet-wsl2</id><content type="html" xml:base="http://localhost:4000/cheatsheet/cheatsheet-wsl2/">&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;

&lt;h2 id=&quot;windows-10&quot;&gt;Windows 10&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Select &lt;strong&gt;Start&lt;/strong&gt; &amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Time &amp;amp; language&lt;/strong&gt; &amp;gt; &lt;strong&gt;Language &amp;amp; region&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;Choose a language from the Windows display language menu, or, next to &lt;strong&gt;Preferred languages&lt;/strong&gt;, select &lt;strong&gt;Add a language&lt;/strong&gt; to install the one you want if it isn’t listed.&lt;/li&gt;
      &lt;li&gt;press &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; to change keyboard language to German&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Right-click on the taskbar, and in the context menu that appears, select &lt;strong&gt;News and interests&lt;/strong&gt; &amp;gt; &lt;strong&gt;Turn off&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wi-fi-turn-off-metered-connection-getaktete-verbindung&quot;&gt;Wi-Fi: Turn off metered connection (“getaktete Verbindung”)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Eine &lt;strong&gt;getaktete Verbindung&lt;/strong&gt; ist eine Internetverbindung, der ein Datenlimit zugeordnet wurde.&lt;/li&gt;
  &lt;li&gt;Mobilfunkdatenverbindungen sind standardmäßig als getaktet festgelegt.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WLAN- und Ethernet-Netzwerkverbindungen können als getaktet festgelegt werden, sind es standardmäßig aber nicht.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To set a Wi-Fi network connection as metered:
    &lt;ul&gt;
      &lt;li&gt;Select &lt;strong&gt;Start&lt;/strong&gt; &amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Network &amp;amp; Internet&lt;/strong&gt; &amp;gt; &lt;strong&gt;Wi-Fi&lt;/strong&gt; &amp;gt; &lt;strong&gt;Manage known networks&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Select the Wi-Fi network &amp;gt; &lt;strong&gt;Properties&lt;/strong&gt; &amp;gt; turn off &lt;strong&gt;Set as metered connection&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wsl2-windows-terminal&quot;&gt;WSL2, Windows Terminal&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;install &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/wsl/install&quot;&gt;WSL2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=de-de&amp;amp;gl=de&quot;&gt;Windows Terminal&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;open Windows Terminal Settings via &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;&lt;/li&gt;
      &lt;li&gt;set default profile “Ubuntu”&lt;/li&gt;
      &lt;li&gt;under “Ubuntu” profile settings, under “Appearance”:
        &lt;ul&gt;
          &lt;li&gt;set default color scheme “Tango Dark”&lt;/li&gt;
          &lt;li&gt;set default font “Ubuntu Mono”&lt;/li&gt;
          &lt;li&gt;set Cursor shape “filled box”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vim&quot;&gt;Vim&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/NLKNguyen/papercolor-theme&quot;&gt;Papercolor Theme&lt;/a&gt; in vim&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://assets.ubuntu.com/v1/0cef8205-ubuntu-font-family-0.83.zip&quot;&gt;Ubuntu font&lt;/a&gt; as default terminal font
    &lt;ul&gt;
      &lt;li&gt;unzip&lt;/li&gt;
      &lt;li&gt;mark all the fonts in the package&lt;/li&gt;
      &lt;li&gt;right-click on the marked packages and select “install”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/preservim/vim-markdown&quot;&gt;vim-markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/iamcco/markdown-preview.nvim&quot;&gt;markdown preview&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;don’t forget &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:call mkdp#util#install()&lt;/code&gt; after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vscode&quot;&gt;VSCode&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;install VSCode on Windows (not in WSL!)&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl&quot;&gt;Remote - WSL&lt;/a&gt; Extension in VSCode
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/remote/wsl&quot;&gt;guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;restart Windows Terminal after installation&lt;/li&gt;
      &lt;li&gt;in WSL2 run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code .&lt;/code&gt;. The download will take a while and the following messages will appear:
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Installing VS Code Server &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x64 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;74b1f979648cc44d385a2286793c226e611f59e7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Downloading: 100%
Unpacking: 100%
Unpacked 2424 files and folders to /home/bra-ket/.vscode-server/bin/74b1f979648cc44d385a2286793c226e611f59e7.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools&quot;&gt;C/C++&lt;/a&gt; Extension in VSCode&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bash&quot;&gt;bash&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; should already exist
    &lt;ul&gt;
      &lt;li&gt;set
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;HISTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;HISTFILESIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gcc_phth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gcc -g -Wall -pedantic '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cc&quot;&gt;C/C++&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gcc build-essential gdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-essential gdb&lt;/code&gt; includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g++&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;firefox&quot;&gt;firefox&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;disable addons:
    &lt;ul&gt;
      &lt;li&gt;iCloud Bookmarks&lt;/li&gt;
      &lt;li&gt;StickyNotes&lt;/li&gt;
      &lt;li&gt;TeXZilla&lt;/li&gt;
      &lt;li&gt;Reload in address bar&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&quot;starting-a-windows-program-in-wsl&quot;&gt;Starting a Windows Program in WSL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bleepingcomputer.com/news/microsoft/how-to-run-windows-10-programs-in-a-wsl-linux-shell/&quot;&gt;source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make sure the program can be found by checking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;When you are in a WSL shell, you can execute a Windows 10 program simply by typing its full name, including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exe&lt;/code&gt; extension.&lt;/li&gt;
  &lt;li&gt;If you do not include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exe&lt;/code&gt; extension when executing a command, WSL will think its a Linux command.&lt;/li&gt;
  &lt;li&gt;If you wanted to launch a program that is not in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, you would need to specify the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path/to/program.exe&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;/mnt/c/program files/7-zip/7z.exe&quot; a -tzip code.zip code/&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apps&quot;&gt;Apps&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;explorer.exe .&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;open Windows Explorer in current directory&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Cheatsheet" /><category term="wsl2" /><category term="cheatsheet" /><summary type="html">For quick setup of WSL2</summary></entry><entry><title type="html">DatKom Notes</title><link href="http://localhost:4000/notes/notes-DatKom/" rel="alternate" type="text/html" title="DatKom Notes" /><published>2022-09-22T00:00:00+02:00</published><updated>2022-09-22T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-DatKom</id><content type="html" xml:base="http://localhost:4000/notes/notes-DatKom/">&lt;h1 id=&quot;concepts&quot;&gt;Concepts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Communication services, layer models, protocols&lt;/li&gt;
  &lt;li&gt;Physical basics of transmission&lt;/li&gt;
  &lt;li&gt;Error handling and medium access&lt;/li&gt;
  &lt;li&gt;Internet Protocol (IP) and Routing: Connecting remote hosts&lt;/li&gt;
  &lt;li&gt;Transmission Control Protocol (TCP): Connecting applications&lt;/li&gt;
  &lt;li&gt;Security: Cryptographic primitives, IPsec, SSL/TLS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From [&lt;a href=&quot;https://www.campus.rwth-aachen.de/rwth/all/abstractModule.asp?gguid=0x2F22AE7D7BE14B4B8AEC4D8B904EC25A&amp;amp;tguid=0x52DF76AB4F0BB84AB1CAEF0A89F08202&quot;&gt;source&lt;/a&gt;]:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Client/Server- und Peer-to-Peer-Systeme&lt;/li&gt;
  &lt;li&gt;OSI-Referenzmodell und TCP/IP-Referenzmodell&lt;/li&gt;
  &lt;li&gt;Übertragungsmedien und Signaldarstellung&lt;/li&gt;
  &lt;li&gt;Fehlerbehandlung, Flusssteuerung und Medienzugriff&lt;/li&gt;
  &lt;li&gt;Lokale Netze, speziell Ethernet&lt;/li&gt;
  &lt;li&gt;Netzkomponenten und Firewalls&lt;/li&gt;
  &lt;li&gt;Internet-Protokolle: IP, Routing, TCP/UDP&lt;/li&gt;
  &lt;li&gt;Sicherheitsmanagement und Datenschutz, Sicherheitsprobleme und Angriffe im Internet&lt;/li&gt;
  &lt;li&gt;Grundlagen der Kryptographie und sichere Internet-Protokolle&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-every-cs-major-should-know&quot;&gt;What every CS major should know&lt;/h1&gt;

&lt;p&gt;[&lt;a href=&quot;https://matt.might.net/articles/what-cs-majors-should-know/&quot;&gt;source&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id=&quot;networking&quot;&gt;Networking&lt;/h2&gt;

&lt;p&gt;Given the ubiquity of networks, computer scientists should have a firm understanding of the network stack and routing protocols within a network.&lt;/p&gt;

&lt;p&gt;The mechanics of building an efficient, reliable transmission protocol (like TCP) on top of an unreliable transmission protocol (like IP) should not be magic to a computer scientist. It should be core knowledge.&lt;/p&gt;

&lt;p&gt;Computer scientists must understand the trade-offs involved in protocol design–for example, when to choose TCP and when to choose UDP. (Programmers need to understand the larger social implications for congestion should they use UDP at large scales as well.)&lt;/p&gt;

&lt;h3 id=&quot;specific-recommendations&quot;&gt;Specific recommendations&lt;/h3&gt;

&lt;p&gt;Given the frequency with which the modern programmer encounters network programming, it’s helpful to know the protocols for existing standards, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;802.3 and 802.11;&lt;/li&gt;
  &lt;li&gt;IPv4 and IPv6; and&lt;/li&gt;
  &lt;li&gt;DNS, SMTP and HTTP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Computer scientists should understand exponential back off in packet collision resolution and the additive-increase multiplicative-decrease mechanism involved in congestion control.&lt;/p&gt;

&lt;p&gt;Every computer scientist should implement the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an HTTP client and daemon;&lt;/li&gt;
  &lt;li&gt;a DNS resolver and server; and&lt;/li&gt;
  &lt;li&gt;a command-line SMTP mailer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No student should ever pass an intro neworking class without sniffing their instructor’s Google query off wireshark.&lt;/p&gt;

&lt;p&gt;It’s probably going too far to require all students to implement a reliable transmission protocol from scratch atop IP, but I can say that it was a personally transformative experience for me as a student.&lt;/p&gt;

&lt;h3 id=&quot;recommended-reading&quot;&gt;Recommended reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Unix Network Programming by Stevens, Fenner and Rudoff.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;p&gt;The sad truth of security is that the majority of security vulnerabilities come from sloppy programming. The sadder truth is that many schools do a poor job of training programmers to secure their code.&lt;/p&gt;

&lt;p&gt;Computer scientists must be aware of the means by which a program can be compromised.&lt;/p&gt;

&lt;p&gt;They need to develop a sense of defensive programming–a mind for thinking about how their own code might be attacked.&lt;/p&gt;

&lt;p&gt;Security is the kind of training that is best distributed throughout the entire curriculum: each discipline should warn students of its native vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;specific-recommendations-1&quot;&gt;Specific recommendations&lt;/h3&gt;

&lt;p&gt;At a minimum, every computer scientist needs to understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;social engineering;&lt;/li&gt;
  &lt;li&gt;buffer overflows;&lt;/li&gt;
  &lt;li&gt;integer overflow;&lt;/li&gt;
  &lt;li&gt;code injection vulnerabilities;&lt;/li&gt;
  &lt;li&gt;race conditions; and&lt;/li&gt;
  &lt;li&gt;privilege confusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few readers have pointed out that computer scientists also need to be aware of basic IT security measures, such how to choose legitimately good passwords and how to properly configure a firewall with iptables.&lt;/p&gt;

&lt;h3 id=&quot;recommended-reading-1&quot;&gt;Recommended reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Metasploit: The Penetration Tester’s Guide by Kennedy, O’Gorman, Kearns and Aharoni.&lt;/li&gt;
  &lt;li&gt;Security Engineering by Anderson.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h2&gt;

&lt;p&gt;Cryptography is what makes much of our digital lives possible.&lt;/p&gt;

&lt;p&gt;Computer scientists should understand and be able to implement the following concepts, as well as the common pitfalls in doing so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;symmetric-key cryptosystems;&lt;/li&gt;
  &lt;li&gt;public-key cryptosystems;&lt;/li&gt;
  &lt;li&gt;secure hash functions;&lt;/li&gt;
  &lt;li&gt;challenge-response authentication;&lt;/li&gt;
  &lt;li&gt;digital signature algorithms; and&lt;/li&gt;
  &lt;li&gt;threshold cryptosystems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since it’s a common fault in implementations of cryptosystems, every computer scientist should know how to acquire a sufficiently random number for the task at hand.&lt;/p&gt;

&lt;p&gt;At the very least, as nearly every data breach has shown, computer scientists need to know how to salt and hash passwords for storage.&lt;/p&gt;

&lt;h3 id=&quot;specific-recommendations-2&quot;&gt;Specific recommendations&lt;/h3&gt;

&lt;p&gt;Every computer scientist should have the pleasure of breaking ciphertext using pre-modern cryptosystems with hand-rolled statistical tools.&lt;/p&gt;

&lt;p&gt;RSA is easy enough to implement that everyone should do it.&lt;/p&gt;

&lt;p&gt;Every student should create their own digital certificate and set up https in apache. (It’s surprisingly arduous to do this.)&lt;/p&gt;

&lt;p&gt;Student should also write a console web client that connects over SSL.&lt;/p&gt;

&lt;p&gt;As strictly practical matters, computer scientists should know how to use GPG; how to use public-key authentication for ssh; and how to encrypt a directory or a hard disk.&lt;/p&gt;

&lt;h3 id=&quot;recommended-reading-2&quot;&gt;Recommended reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cryptography Engineering by Ferguson, Schneier and Kohno.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="datkom" /><category term="notes" /><summary type="html">For learning DatKom</summary></entry><entry><title type="html">Operating Systems Notes</title><link href="http://localhost:4000/notes/notes-OS/" rel="alternate" type="text/html" title="Operating Systems Notes" /><published>2022-09-22T00:00:00+02:00</published><updated>2022-09-22T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-OS</id><content type="html" xml:base="http://localhost:4000/notes/notes-OS/">&lt;h1 id=&quot;lectures&quot;&gt;Lectures&lt;/h1&gt;

&lt;h2 id=&quot;i4-comsys-wehrle-sose&quot;&gt;i4 ComSys, Wehrle (SoSe)&lt;/h2&gt;

&lt;p&gt;from &lt;a href=&quot;https://www.comsys.rwth-aachen.de/teaching&quot;&gt;comsys website&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unix shell and programming language C&lt;/li&gt;
  &lt;li&gt;Process management: processes, threads, inter-process communication&lt;/li&gt;
  &lt;li&gt;CPU scheduling&lt;/li&gt;
  &lt;li&gt;Process synchronization, deadlocks&lt;/li&gt;
  &lt;li&gt;Memory management: virtual memory, segmentation, paging, fragmentation&lt;/li&gt;
  &lt;li&gt;File system and I/O system&lt;/li&gt;
  &lt;li&gt;Communication subsystem and sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;from RWTH Online:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Aufgaben und Struktur von Betriebssystemen&lt;/li&gt;
  &lt;li&gt;Das Betriebssystem Unix&lt;/li&gt;
  &lt;li&gt;Systemaufrufe und Shellprogrammierung&lt;/li&gt;
  &lt;li&gt;Einführung in die Programmiersprache C&lt;/li&gt;
  &lt;li&gt;Prozessverwaltung: Prozesse, Threads und Interprozesskommunikation&lt;/li&gt;
  &lt;li&gt;Prozess-Synchronisation, Nebenläufigkeit und Deadlocks&lt;/li&gt;
  &lt;li&gt;CPU-Scheduling&lt;/li&gt;
  &lt;li&gt;Speicherverwaltung: Segmentierung, Paging, Fragmentierung, virtueller Speicher&lt;/li&gt;
  &lt;li&gt;Stack- und Heap-Verwaltung, Garbage Collection&lt;/li&gt;
  &lt;li&gt;Dateisystem und Rechteverwaltung&lt;/li&gt;
  &lt;li&gt;I/O-System&lt;/li&gt;
  &lt;li&gt;Verteilte Systeme&lt;/li&gt;
  &lt;li&gt;Socket-Programmierung&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;power-system-automation-lankes&quot;&gt;Power System Automation, Lankes&lt;/h2&gt;

&lt;h3 id=&quot;6sws&quot;&gt;6SWS&lt;/h3&gt;

&lt;p&gt;Die Vorlesung vermittelt den Entwurf und den Aufbau von modernen Betriebssystemen. Hierzu wird zunächst der Aufbau von Rechnerarchitekturen analysiert und die Konsequenzen für die Systemsoftware gezogen.  Insbesondere werden Sicherheitsrisiken erläutert und wie die Systemsoftware den Nutzer vor Angriffen schützt. Neben Sicherheitsaspekten vermittelt die Vorlesung, welche Möglichkeiten zur Leistungssteigerung existieren und wie Optimierungsziele der Ressourcenverwaltung erreicht werden.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aufgaben und Struktur von Betriebssystemen&lt;/li&gt;
  &lt;li&gt;Einführung in UNIX&lt;/li&gt;
  &lt;li&gt;Programmierwerkzeuge
    &lt;ul&gt;
      &lt;li&gt;Verwaltung von Source Code&lt;/li&gt;
      &lt;li&gt;Einführung in dem Prozess des „Code Reviews“ und des automatisierten Testens&lt;/li&gt;
      &lt;li&gt;Rust vs. C/C++&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Systemnahe Programmierung
    &lt;ul&gt;
      &lt;li&gt;Prozessormodelle (insbesondere Intel 80x86)&lt;/li&gt;
      &lt;li&gt;Register- und Speichermodelle, Befehlsformate, Datentypen, Adressierungsarten&lt;/li&gt;
      &lt;li&gt;Instruktionslevelparallelität / Datenparalleliät&lt;/li&gt;
      &lt;li&gt;Mehrkern- und Mehrprozessor-Architekturen
        &lt;ul&gt;
          &lt;li&gt;Einführung in die nebenläufige Programmierung&lt;/li&gt;
          &lt;li&gt;Einführung in die Parallelisierung&lt;/li&gt;
          &lt;li&gt;Leistungsevaluation, Leistungsgrenzen (u.a. Amdahls Gesetz)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Funktionsaufrufe und ihre Konventionen
        &lt;ul&gt;
          &lt;li&gt;Sicherheitsrisiken, mögliche Angriffsszenarien („Exploits“) und existierende Schutztechniken&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Assembler und Assemblierung: Aufgaben, Funktionsweise&lt;/li&gt;
  &lt;li&gt;Laden, Binden:
    &lt;ul&gt;
      &lt;li&gt;Statisches / dynamisches Binden, Laden mit / ohne Speicherverwaltung&lt;/li&gt;
      &lt;li&gt;Angriffsszenarien und existierende Schutztechniken
        &lt;ul&gt;
          &lt;li&gt;Adress Space Layout Randomization (ASLR)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Entwurfsprinzipien
    &lt;ul&gt;
      &lt;li&gt;Monolithische Betriebssysteme&lt;/li&gt;
      &lt;li&gt;Microkernels (insbesondere seL4)&lt;/li&gt;
      &lt;li&gt;Unikernels / Library OS&lt;/li&gt;
      &lt;li&gt;Exokernels&lt;/li&gt;
      &lt;li&gt;Funktionale Sicherheit der Systemsoftware
        &lt;ul&gt;
          &lt;li&gt;z.B. durch die Verwendung einer sicheren, systemnahen Programmiersprache&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Betriebsmittel- und Prozessverwaltung
    &lt;ul&gt;
      &lt;li&gt;Aufgaben der Betriebsmittel- und Prozessverwaltung&lt;/li&gt;
      &lt;li&gt;Scheduling / Prozessplanung&lt;/li&gt;
      &lt;li&gt;Prozesssynchronisation&lt;/li&gt;
      &lt;li&gt;Verklemmungen&lt;/li&gt;
      &lt;li&gt;Interprozesskommunikation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unterbrechungen
    &lt;ul&gt;
      &lt;li&gt;Arten und Aufgaben von Unterbrechungen&lt;/li&gt;
      &lt;li&gt;Interruptsystem insbesondere des x86&lt;/li&gt;
      &lt;li&gt;Systemaufrufe&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Arbeitsspeicherverwaltung
    &lt;ul&gt;
      &lt;li&gt;Paging und Segmentierung&lt;/li&gt;
      &lt;li&gt;Demand Paging und Verdrängungsstrategien&lt;/li&gt;
      &lt;li&gt;Seitenkanalattacken am Beispiel von Meltdown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ein-/ Ausgabe
    &lt;ul&gt;
      &lt;li&gt;Memory-mapped I/O&lt;/li&gt;
      &lt;li&gt;Schichtung der E/A-Software&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dateisysteme
    &lt;ul&gt;
      &lt;li&gt;Dateizugriff / Dateioperationen&lt;/li&gt;
      &lt;li&gt;Struktur und Schichtung&lt;/li&gt;
      &lt;li&gt;Journaling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Isolierung von Systemkomponenten
    &lt;ul&gt;
      &lt;li&gt;Sandboxing&lt;/li&gt;
      &lt;li&gt;Betriebssystemvirtualisierung / Container&lt;/li&gt;
      &lt;li&gt;Virtuelle Maschinen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3sws&quot;&gt;3SWS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Modelle, Grundlagen und Konzepte von Betriebssystemen (Linux/UNIX, Windows; Beispielarchitektur: 80x86).&lt;/li&gt;
  &lt;li&gt;Einleitung und Steuersprachen: Begriffsdefinitionen, Aufgaben und Struktur von Betriebssystemen, Steuersprachen und Shellprogrammierung (Bsp.: die Bourne-Shell), Programmierwerkzeuge.&lt;/li&gt;
  &lt;li&gt;Betriebsmittel- und Prozessverwaltung: Aufgaben der Betriebsmittelverwaltung, Prozessverwaltung, Prozesssynchronisation, Verklemmungen.&lt;/li&gt;
  &lt;li&gt;Unterbrechungen: Arten und Aufgaben von Unterbrechungen, das Interruptsystem der 80x86-Architektur.&lt;/li&gt;
  &lt;li&gt;Arbeitsspeicherverwaltung: Grundlegende Strategien der Speicherverwaltung, Seitenadressierung, Seitenwechsel auf Abruf, Seitenverdrängungsstrategien, Segmentierung, Segmentierung/Seitenadressierung/Zugriffschutz in der 80x86-Architektur.&lt;/li&gt;
  &lt;li&gt;Ein-/ Ausgabe: E/A in der 80x86-Architektur, Plattenspeicherverwaltung, Schichtung der E/A-Software.&lt;/li&gt;
  &lt;li&gt;Dateisysteme: Definitionen, Dateizugriff, Dateioperationen, Struktur, Schichtung, Beispiel: Aufbau eines I-Node-basierten Dateisystems&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;unix-system-calls&quot;&gt;UNIX System calls&lt;/h1&gt;

&lt;h2 id=&quot;strace&quot;&gt;strace&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;overview: &lt;a href=&quot;https://www.thegeekstuff.com/2011/11/strace-examples/&quot;&gt;thegeekstuff&lt;/a&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace some_command&lt;/code&gt;: trace system calls and signals&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace ./avail_mem_malloc -l&lt;/code&gt;: trace system calls and signals when running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./avail_mem_malloc -l&lt;/code&gt; (source code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./avail_mem_malloc -l&lt;/code&gt; is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/bra-ket/Desktop/Aachen/Uni/Basics_CS/OS/git/C_exercises/day_20_memory/avail_mem_malloc.c&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace -e mmap ./avail_mem_malloc -l&lt;/code&gt;: filter a &lt;strong&gt;specific&lt;/strong&gt; system call and/or signals, here: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap&lt;/code&gt; system call&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-to-memory&quot;&gt;Related to Memory&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;munmap&lt;/code&gt;: map or unmap files or devices into memory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk&lt;/code&gt;: change data segment size&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resource-limits&quot;&gt;Resource Limits&lt;/h1&gt;

&lt;h2 id=&quot;setrlimit-getrlimit&quot;&gt;setrlimit(), getrlimit()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;see &lt;a href=&quot;https://github.com/pharath/C_exercises/blob/master/day_20_memory/setrlimit.c&quot;&gt;example setrlimit.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man setrlimit&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Trick&lt;/strong&gt;: to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; pages in color:
        &lt;ul&gt;
          &lt;li&gt;install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;most&lt;/code&gt; pager using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install most&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;in terminal set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export PAGER=&quot;most&quot;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;to change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;most&lt;/code&gt; keybindings to vim keybindings &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp -iv /usr/share/doc/most/lesskeys.rc ~/.mostrc&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ulimit&quot;&gt;ulimit&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;get and set user limits
    &lt;ul&gt;
      &lt;li&gt;i.e. not for one process, but for one user!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man ulimit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;current user limits: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit -a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="os" /><category term="notes" /><summary type="html">Operating Systems Basics</summary></entry><entry><title type="html">C Notes</title><link href="http://localhost:4000/notes/notes-c/" rel="alternate" type="text/html" title="C Notes" /><published>2022-09-22T00:00:00+02:00</published><updated>2022-09-22T00:00:00+02:00</updated><id>http://localhost:4000/notes/notes-c</id><content type="html" xml:base="http://localhost:4000/notes/notes-c/">&lt;h1 id=&quot;concepts&quot;&gt;Concepts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://online.rwth-aachen.de/RWTHonline/ee/ui/ca2/app/desktop/#/slc.tm.cp/student/courses/458361?$ctx=design=ca;lang=de&amp;amp;$scrollTo=toc_overview&quot;&gt;RWTH Grundgebiete der Informatik 1&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Gegenstand der Vorlesung ist die Einführung in Programmiertechniken, Datenstrukturen und Algorithmen anhand von C.&lt;/li&gt;
      &lt;li&gt;Grundlegende Programmelemente:
        &lt;ul&gt;
          &lt;li&gt;Skalare und zusammengesetzte Datentypen, Anweisungen, Kontrollfluß, Funktionen, Klassen, C-Programmstruktur und Programmierumgebung;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Programmanalyse:
        &lt;ul&gt;
          &lt;li&gt;Wachstumsordnungen, Komplexitätsklassen, best/worst case Analyse;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lineare Datenstrukturen:
        &lt;ul&gt;
          &lt;li&gt;Listen, Stacks, Queues, Iteration und Rekursion;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Nichtlineare Datenstrukturen und Suchverfahren:
        &lt;ul&gt;
          &lt;li&gt;Bäume, Graphen, Suchbäume, Hashtabellen;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Algorithmenentwurf:
        &lt;ul&gt;
          &lt;li&gt;Sortierverfahren, Heuristiken, Greedy-Algorithmen, grundlegende Optimierungsverfahren&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;about-c&quot;&gt;About C&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;C is a &lt;strong&gt;procedural&lt;/strong&gt; language, whereas C++ is an &lt;strong&gt;object-oriented&lt;/strong&gt; language&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;documentation&quot;&gt;Documentation&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;standard library
    &lt;ul&gt;
      &lt;li&gt;On Unix-like systems, the authoritative documentation of the actually implemented API is provided in the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; pages.&lt;/li&gt;
      &lt;li&gt;On most systems, man pages on standard library functions are in section 3 (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 3 malloc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 3 puts&lt;/code&gt;, etc.)&lt;/li&gt;
      &lt;li&gt;Section 7 may contain some more generic pages on underlying concepts (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 7 math_error&lt;/code&gt; in Linux).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;build&quot;&gt;Build&lt;/h1&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;TODO&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;object-code&quot;&gt;Object Code&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;With the help of an adequate &lt;strong&gt;compiler&lt;/strong&gt;, for example GCC, your source code is translated into &lt;strong&gt;object code&lt;/strong&gt;, first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;binary-files-elf-files&quot;&gt;Binary files (ELF files)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://linuxhint.com/understanding_elf_file_format/&quot;&gt;What is an ELF file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Eventually, the &lt;strong&gt;linker&lt;/strong&gt; translates the object code into a &lt;strong&gt;binary file&lt;/strong&gt; that links the object code with the referenced &lt;strong&gt;libraries&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;This binary file contains the single instructions as machine code that are understood by the CPU, and are executed as soon the compiled program is run.&lt;/li&gt;
  &lt;li&gt;The binary file follows a specific &lt;strong&gt;structure&lt;/strong&gt;, and one of the most common ones is named &lt;strong&gt;ELF&lt;/strong&gt; that abbreviates &lt;strong&gt;Executable and Linkable Format&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;ELF is widely used for
    &lt;ul&gt;
      &lt;li&gt;executable files&lt;/li&gt;
      &lt;li&gt;relocatable object files&lt;/li&gt;
      &lt;li&gt;shared libraries&lt;/li&gt;
      &lt;li&gt;core dumps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The specification does &lt;strong&gt;not&lt;/strong&gt; clarify the &lt;strong&gt;filename extension&lt;/strong&gt; for ELF files. In use is a variety of letter combinations, such as
    &lt;ul&gt;
      &lt;li&gt;.axf,&lt;/li&gt;
      &lt;li&gt;.bin,&lt;/li&gt;
      &lt;li&gt;.elf,&lt;/li&gt;
      &lt;li&gt;.o,&lt;/li&gt;
      &lt;li&gt;.prx,&lt;/li&gt;
      &lt;li&gt;.puff,&lt;/li&gt;
      &lt;li&gt;.ko,&lt;/li&gt;
      &lt;li&gt;.so, and&lt;/li&gt;
      &lt;li&gt;.mod,&lt;/li&gt;
      &lt;li&gt;or none.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man elf&lt;/code&gt; gives you a handy summary about the structure of an ELF file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elf-header&quot;&gt;ELF Header&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;reading the ELF header:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf -h elf_file&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;read more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readelf&lt;/code&gt; in (&lt;a href=&quot;https://linuxhint.com/understanding_elf_file_format/&quot;&gt;What is an ELF file&lt;/a&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump -h elf_file&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The ELF header is 32 bytes long, and identifies the format of the file.&lt;/li&gt;
  &lt;li&gt;It starts with a sequence of four unique bytes that are 0x7F followed by 0x45, 0x4c, and 0x46 which translates into the three letters E, L, and F.&lt;/li&gt;
  &lt;li&gt;Among other values, the header also indicates
    &lt;ul&gt;
      &lt;li&gt;whether it is an ELF file for 32 or 64-bit format,&lt;/li&gt;
      &lt;li&gt;uses little or big endianness,&lt;/li&gt;
      &lt;li&gt;shows the ELF version&lt;/li&gt;
      &lt;li&gt;as well as for which operating system the file was compiled for in order to interoperate with the right application binary interface (ABI) and cpu instruction set.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;operator-precedence-associativity&quot;&gt;Operator Precedence, Associativity&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;When multiple operators of the same precedence level are used in an expression, they are evaluated according to their &lt;strong&gt;associativity&lt;/strong&gt; (&lt;a href=&quot;https://www.programiz.com/cpp-programming/operators-precedence-associativity&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;variables&quot;&gt;Variables&lt;/h1&gt;

&lt;h2 id=&quot;initialization&quot;&gt;Initialization&lt;/h2&gt;

&lt;p&gt;see &lt;a href=&quot;https://www.geeksforgeeks.org/different-ways-to-initialize-a-variable-in-c-c/&quot;&gt;Different ways to initialize a variable in C/C++&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;global-variables-aka-external-variables&quot;&gt;Global variables (aka External variables)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;external variable: a variable defined outside of any function&lt;/li&gt;
  &lt;li&gt;scope: the scope is the entire source code file that contains the variable definition&lt;/li&gt;
  &lt;li&gt;If you don’t explicitly initialize an external variable when it’s defined, the compiler initializes it to 0.
    &lt;ul&gt;
      &lt;li&gt;this is different than local variables!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;best-practice&quot;&gt;Best practice&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use them rarely
    &lt;ul&gt;
      &lt;li&gt;because usage violates the principle of &lt;strong&gt;modular independence&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;i.e each function should be self-contained/modular&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;use them only when all or most of the program’s functions need access to the variable&lt;/li&gt;
  &lt;li&gt;When a function uses an external variable, it is good programming practice to declare the variable within the function using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extern&lt;/code&gt; keyword (&lt;strong&gt;C&lt;/strong&gt;: see &lt;a href=&quot;https://devdocs.io/c/language/storage_duration&quot;&gt;Storage-class specifiers&lt;/a&gt;; &lt;strong&gt;C++&lt;/strong&gt;: see &lt;a href=&quot;https://en.cppreference.com/w/c/language/storage_duration&quot;&gt;Storage-class specifiers&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;local-variables&quot;&gt;Local variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;aren’t automatically initialized to 0 by the compiler
    &lt;ul&gt;
      &lt;li&gt;if not initialized they have an &lt;strong&gt;undefined&lt;/strong&gt; or &lt;strong&gt;garbage value&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;static-variables-vs-automatic-variables&quot;&gt;Static variables vs. Automatic variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;local variables are &lt;strong&gt;automatic&lt;/strong&gt; by default, i.e.
    &lt;ul&gt;
      &lt;li&gt;created anew each time the function is called&lt;/li&gt;
      &lt;li&gt;destroyed when execution leaves the function
        &lt;ul&gt;
          &lt;li&gt;thus doesn’t retain its value between calls to the function in which it is defined.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In order for a local variable to retain its value between function calls, it must be defined as &lt;strong&gt;static&lt;/strong&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; keyword.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* Additional code goes here */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;(optional) if you want to, you can include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; keyword in the definition
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* Additional code goes here */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; are &lt;strong&gt;Storage-class specifiers&lt;/strong&gt; (see &lt;a href=&quot;#storage-duration&quot;&gt;below&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;storage-duration&quot;&gt;Storage Duration&lt;/h3&gt;

&lt;p&gt;From cppreference: &lt;a href=&quot;https://en.cppreference.com/w/c/language/storage_duration#Storage_duration&quot;&gt;Storage duration&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Storage-class specifiers&lt;/strong&gt;: Specify &lt;em&gt;storage duration&lt;/em&gt; (…) of objects and functions.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; (automatic storage duration)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; (automatic storage duration)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; (static storage duration)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extern&lt;/code&gt; (static storage duration)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Thread_local&lt;/code&gt; (thread storage duration)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage duration&lt;/strong&gt;: Every object has a property called &lt;em&gt;storage duration&lt;/em&gt;, which limits the &lt;em&gt;object lifetime&lt;/em&gt;. There are four kinds of storage duration in C:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;The storage duration is the entire execution of the program&lt;/li&gt;
          &lt;li&gt;All objects declared static have this storage duration.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;automatic&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;The storage is allocated when the block in which the object was declared is entered and deallocated when it is exited by any means (goto, return, reaching the end).&lt;/li&gt;
          &lt;li&gt;All function parameters and non-static block-scope objects have this storage duration, as well as compound literals used at block scope.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;thread&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;The storage duration is the entire execution of the thread in which it was created&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;allocated&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;The storage is allocated and deallocated on request, using &lt;strong&gt;dynamic memory allocation&lt;/strong&gt; functions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;int&quot;&gt;Int&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;don’t convert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;when an integer type is converted to a floating-point type, the resulting floating-point value might not exactly match the integer value (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.999995&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;keep integer values in type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt;, or variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long long&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;low-order-byte-and-high-order-byte&quot;&gt;Low-order byte and High-order byte&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In C, the size of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; is implementation defined, but is usually 2, or 4 bytes in size. The &lt;strong&gt;high-order byte&lt;/strong&gt; would be the byte that contains the largest portion of the value. The &lt;strong&gt;low-order byte&lt;/strong&gt; would be the byte that contains the smallest portion of the value.
    &lt;ul&gt;
      &lt;li&gt;For example, if you have a 16-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, and the value is 5,243, you’d write that in hex as 0x147B. The high order byte is the 0x14 (1 byte = 8 bit, sodass 256 Werte möglich sind, was in hex &lt;strong&gt;2 Ziffern&lt;/strong&gt; sind! Daher die 14 und nicht nur die 1 hinter dem 0x.), and the low-order byte is the 0x7B. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; is only 1 byte, so it is always contained within the lowest order byte. When written in hex (in left-to-right fashion) the low-order byte will always be the right-most 2 digits, and the high-order byte will be the left-most 2 digits (assuming they write all the bytes out, including leading 0s). (&lt;a href=&quot;https://stackoverflow.com/questions/47117509/high-order-and-low-order-byte&quot;&gt;stackoverflow&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;array&lt;/strong&gt;: a collection of data storage locations, each storing the same type of data and having the same name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;array elements&lt;/strong&gt;: the storage locations of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;declaration&quot;&gt;Declaration&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;When you declare an array, the compiler &lt;strong&gt;sets aside a block of memory large enough to hold the entire array&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Individual array elements are stored in &lt;strong&gt;sequential memory locations&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;initialization-1&quot;&gt;Initialization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You can initialize &lt;strong&gt;all or part of&lt;/strong&gt; an array when you first declare it
    &lt;ul&gt;
      &lt;li&gt;ANSI standard: the elements that are not initialized will be set to &lt;strong&gt;zero&lt;/strong&gt;.
        &lt;ul&gt;
          &lt;li&gt;however, it is best to make sure you know what a value is initialized to by setting it yourself.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you omit the array size, the compiler creates an array just large enough&lt;/li&gt;
  &lt;li&gt;If you include too many initializers, the compiler detects an error.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is different from using subscripts which are out of bounds which will &lt;strong&gt;not&lt;/strong&gt; be detected by the compiler!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subscripts&quot;&gt;Subscripts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;the last element is &lt;strong&gt;one less&lt;/strong&gt; than the number of elements in the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;passing-arrays-to-a-function&quot;&gt;Passing arrays to a function&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;problem 1&lt;/strong&gt;: The only way you can pass an array to a function is by using a pointer to an array. (see &lt;a href=&quot;#passing-function-arguments&quot;&gt;Passing Function arguments&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;problem 2&lt;/strong&gt;: function that can handle arrays of different sizes (e.g. a function that finds the largest element in an array of integers)
    &lt;ul&gt;
      &lt;li&gt;How does the function know the size of the array whose address it was passed?
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;method 1&lt;/strong&gt;: identify the last array element by storing a &lt;strong&gt;special value&lt;/strong&gt; there (see &lt;a href=&quot;#strings&quot;&gt;Strings&lt;/a&gt;)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;method 2&lt;/strong&gt;: Pass the function the array size as an argument&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;copy-2d-array-and-assign-it-to-another&quot;&gt;Copy 2d array and assign it to another&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/questions/13903388/how-to-assign-values-of-array-to-another-arraymaking-copy-in-c&quot;&gt;stackoverflow&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;out-of-bounds-error&quot;&gt;Out of bounds error&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The C compiler doesn’t recognize whether your program uses an array subscript that is out of bounds.&lt;/li&gt;
  &lt;li&gt;Your program compiles and links, but out-of-range subscripts generally produce erroneous results
    &lt;ul&gt;
      &lt;li&gt;from &lt;a href=&quot;https://stackoverflow.com/questions/9137157/no-out-of-bounds-error&quot;&gt;source&lt;/a&gt;:
        &lt;ul&gt;
          &lt;li&gt;though, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; will do it for some cases if you pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fcatch-undefined-behavior&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; equivalent is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fsanitize=undefined&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ggdb&lt;/code&gt; flag also helps; it causes compilation with extra debugging info, which can be the difference between having/not having line numbers pointing to the error in the code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsanitizer&lt;/code&gt; output.&lt;/li&gt;
          &lt;li&gt;but this does not mean it is part of the C Standard!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;best-practice-1&quot;&gt;Best practice&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt; statements to create constants that can be used when declaring arrays. Then you can easily change the number of elements in the array.&lt;/li&gt;
  &lt;li&gt;do &lt;strong&gt;not&lt;/strong&gt; use multidimensional arrays with &lt;strong&gt;more than three&lt;/strong&gt; dimensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;functions&quot;&gt;Functions&lt;/h1&gt;

&lt;h2 id=&quot;best-practice-2&quot;&gt;Best practice&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void foo(void);&lt;/code&gt; to say “no parameters” in C, and it also works in C++. (&lt;a href=&quot;https://stackoverflow.com/a/693794&quot;&gt;why this is important&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;program-inputoutput-devices&quot;&gt;Program Input/Output, Devices&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;input
    &lt;ul&gt;
      &lt;li&gt;Data moved from an external location into RAM, where the program can access it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;output
    &lt;ul&gt;
      &lt;li&gt;Data sent to a location external to the program (common destinations: screen, printer, disk files)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;devices
    &lt;ul&gt;
      &lt;li&gt;collective term for input sources and output destinations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;streams&quot;&gt;Streams&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;C carries out all input and output operations by means of streams&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;stream&lt;/strong&gt;: a sequence of bytes of data (e.g. a sequence of characters)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;input stream&lt;/strong&gt;: sequence of bytes flowing into a program&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;output stream&lt;/strong&gt;: sequence of bytes flowing out of a program&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;advantage&lt;/strong&gt;: streams make input/output programming &lt;strong&gt;device independent&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;: every C stream is connected to a &lt;strong&gt;file&lt;/strong&gt;, which is an intermediate step between the stream that your program deals with and the actual physical device being used for input or output
    &lt;ul&gt;
      &lt;li&gt;the details of interactions between streams, files, and devices are taken care of automatically by the C library functions and the operating system&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2 modes of C streams&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;text stream&lt;/strong&gt;: consists only of characters (e.g. text data)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;binary stream&lt;/strong&gt;: consists of any sort of data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;five-standard-streams&quot;&gt;Five Standard Streams&lt;/h2&gt;

&lt;p&gt;(the first 3 are C ANSI standard, the last 2 are only under Windows and DOS)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Format Specifier&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Device&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stdin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard input&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Keyboard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stdout&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard output&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stderr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard error&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stdprn*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard printer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Printer (LPT1:)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stdaux*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard auxiliary&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Serial port (COM1:)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;stream-functions&quot;&gt;Stream Functions&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;functions that deal with stream input and output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;input-functions&quot;&gt;Input Functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;hierarchy of 3 levels
    &lt;ul&gt;
      &lt;li&gt;character input (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getchar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getche&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgetc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ungetc&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;line input (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;formatted input (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fflush&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;output-functions&quot;&gt;Output Functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;3 categories
    &lt;ul&gt;
      &lt;li&gt;character output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putchar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fputc&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;line output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fputs&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;formatted output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fprintf&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;printf&quot;&gt;printf&lt;/h1&gt;

&lt;h2 id=&quot;escape-sequences&quot;&gt;Escape sequences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;see &lt;a href=&quot;https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences&quot;&gt;Table of escape sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;format-specifiers&quot;&gt;Format specifiers&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Format Specifier&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%c&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Character&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%d&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Signed integer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%e&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%E&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Scientific notation of floats&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%f&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Float values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%g&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%G&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Similar as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%e&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%E&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%hi&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Signed integer (short)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%hu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unsigned Integer (short)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%i&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unsigned integer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%l&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ld&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%li&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lf&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Double&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%Lf&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Long double&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unsigned int or unsigned long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lli&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%lld&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Long long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%llu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unsigned long long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%o&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Octal representation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%p&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pointer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;String&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%u&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%x&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%X&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hexadecimal representation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%n&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Prints nothing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%%&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Prints &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; character&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These are the basic format specifiers. We can add some other parts with the format specifiers. These are like below&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A minus symbol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;) sign tells left alignment&lt;/li&gt;
  &lt;li&gt;A number after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; specifies the minimum &lt;strong&gt;field width&lt;/strong&gt;. If string is less than the width, it will be filled with spaces&lt;/li&gt;
  &lt;li&gt;A period (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;) is used to separate &lt;strong&gt;field width&lt;/strong&gt; and &lt;strong&gt;precision&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;precision&quot;&gt;Precision&lt;/h3&gt;

&lt;p&gt;From C99 §7.19.6.1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; argument representing a floating-point number is converted to decimal notation in the style &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[−]ddd.ddd&lt;/code&gt;, where the number of digits after the decimal-point character is equal to the &lt;strong&gt;precision&lt;/strong&gt; specification.&lt;/li&gt;
  &lt;li&gt;If the precision is missing, it is taken as 6; if the precision is zero and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; flag is not specified, no decimal-point character appears. If a decimal-point character appears, at least one digit appears before it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The value is rounded to the appropriate number of digits&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;scanf-gets-fgets&quot;&gt;scanf, gets, fgets&lt;/h1&gt;

&lt;p&gt;Read all characters up to the next newline character (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n'&lt;/code&gt;, must use &lt;strong&gt;single&lt;/strong&gt; quotes else it is a string literal).&lt;/p&gt;

&lt;h2 id=&quot;control-characters&quot;&gt;Control Characters&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;EOF&lt;/strong&gt;: If you’re typing at the terminal and you want to provoke an end-of-file, use CTRL-D (unix-style systems) or CTRL-Z (Windows).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scanf&quot;&gt;scanf&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;limitations:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanf()&lt;/code&gt; cannot take strings with &lt;strong&gt;spaces&lt;/strong&gt; in between characters as input, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets()&lt;/code&gt; can&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gets&quot;&gt;gets&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *gets(char *str);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;input stream is read from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt; until
    &lt;ul&gt;
      &lt;li&gt;a newline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n'&lt;/code&gt;) or&lt;/li&gt;
      &lt;li&gt;end-of-&lt;strong&gt;file&lt;/strong&gt; (see &lt;a href=&quot;#control-characters&quot;&gt;Control Characters&lt;/a&gt;) is encountered&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the newline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n'&lt;/code&gt;) is &lt;strong&gt;replaced&lt;/strong&gt; with a null character (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\0'&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;return value:
    &lt;ul&gt;
      &lt;li&gt;a pointer to the string (the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt; encounters an error or reads end-of-file: a null pointer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the string is stored at the location indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;important&lt;/strong&gt;: allocate sufficient memory space to store the string before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fgets&quot;&gt;fgets&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *fgets(char *str, int n, FILE *fp);&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE *fp&lt;/code&gt; is used to specify the input stream (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; indicates where the input string is stored&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; specifies the maximum number of characters to be input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input stream is read until
    &lt;ul&gt;
      &lt;li&gt;a newline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n'&lt;/code&gt;) or&lt;/li&gt;
      &lt;li&gt;end-of-line is encountered or&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; characters have been read&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the newline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n'&lt;/code&gt;) is &lt;strong&gt;included&lt;/strong&gt; in the string (different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt;!) and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\0'&lt;/code&gt; is appended before it is stored (i.e. strings are stored with trailing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\n\0'&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;the return values are the same as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the string is stored at the location indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;char&quot;&gt;Char&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;strong&gt;single quotations&lt;/strong&gt; when initializing a variable&lt;/li&gt;
  &lt;li&gt;char constants:
    &lt;ul&gt;
      &lt;li&gt;literal:
        &lt;ul&gt;
          &lt;li&gt;enclose a single character in &lt;strong&gt;single quotation marks&lt;/strong&gt;
            &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;symbolic:
        &lt;ul&gt;
          &lt;li&gt;using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt;
            &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define EX 'x'
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Sets code equal to 'x' */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;
            &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When you store the character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; in a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; variable, the compiler is really storing the ASCII value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;97&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if you want to print the extended ASCII (aka CP437) characters, you must use an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsigned char&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;not good practice, use UTF-8 instead (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_page_437#Character_set&quot;&gt;mapping from extended ASCII to UTF-8&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;strings&quot;&gt;Strings&lt;/h1&gt;

&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;a string is a sequence of characters delineated by
    &lt;ul&gt;
      &lt;li&gt;a pointer that points to the string’s first character and&lt;/li&gt;
      &lt;li&gt;a null character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\0&lt;/code&gt; that indicates the end of the string (“null-terminated” string)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From &lt;a href=&quot;https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf&quot;&gt;C18 6.4.5&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;A &lt;strong&gt;character string literal&lt;/strong&gt; is a sequence of zero or more multibyte characters enclosed in double-quotes, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;xyz&quot;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;A &lt;strong&gt;UTF–8 string literal&lt;/strong&gt; is the same, except prefixed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u8&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;A &lt;strong&gt;wide string literal&lt;/strong&gt; is the same, except prefixed by the letter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string-literals&quot;&gt;String Literals&lt;/h2&gt;

&lt;p&gt;String Literals sind “besondere” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; arrays, die im read-only memory sein &lt;strong&gt;können&lt;/strong&gt;, aber nicht müssen (abhängig von C implementation). Nach ISO C dürfen sie nicht modifiziert werden!&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.cppreference.com/w/c/language/string_literal&quot;&gt;cppreference&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;character string literal&lt;/strong&gt;: The type of the literal is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char[N]&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; is the size of the string in code units of the execution narrow encoding, including the null terminator.&lt;/li&gt;
  &lt;li&gt;A string literal is not necessarily a string; if a string literal has embedded null characters, it represents an array which contains more than one string:
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;def&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// strlen(p) == 3, but the array has size 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;String literals are &lt;strong&gt;not modifiable&lt;/strong&gt; (and in fact may be placed in read-only memory such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rodata&lt;/code&gt;). If a program attempts to modify the static array formed by a string literal, the behavior is undefined.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Undefined behavior&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK: a is not a string literal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;phth note&lt;/strong&gt;: The latter variant is treated as&lt;/p&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'H'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK: a is not a string literal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;thus, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char a[] = &quot;Hello&quot;;&lt;/code&gt; &lt;strong&gt;copies&lt;/strong&gt; each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; byte of the string literal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt; into the &lt;strong&gt;newly created&lt;/strong&gt; memory block of the array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, but the memory block storing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt;is &lt;strong&gt;not&lt;/strong&gt; modified! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; is a standard array, thus, like all standard arrays, it is modifiable. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; points to &lt;strong&gt;the array’s&lt;/strong&gt; first element &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'H'&lt;/code&gt; and &lt;strong&gt;not&lt;/strong&gt; to the string literal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt;’s first element!&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;from &lt;a href=&quot;https://en.cppreference.com/w/c/language/array_initialization&quot;&gt;cppreference&lt;/a&gt;:
        &lt;ul&gt;
          &lt;li&gt;Successive bytes of the string literal (…), including the terminating null byte/character, initialize the elements of the array&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;phth: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rodata&lt;/code&gt; is the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_segment&quot;&gt;read-only data segment&lt;/a&gt;”, a portion of an object file or the corresponding address space of a program that contains static constants.&lt;/li&gt;
  &lt;li&gt;phth: “may be placed in read-only memory” means they do not have to!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;a href=&quot;http://port70.net/~nsz/c/c89/rationale/c1.html#3-1-4&quot;&gt;C89 Rationale, 3.1.4 String literals&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;String literals are specified to be &lt;strong&gt;unmodifiable&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;This specification allows implementations (phth: z.B. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt;, etc)
    &lt;ul&gt;
      &lt;li&gt;to share copies of strings with identical text,&lt;/li&gt;
      &lt;li&gt;to place string literals &lt;strong&gt;in read-only memory&lt;/strong&gt;, and
        &lt;ul&gt;
          &lt;li&gt;d.h. ob string literals in read-only memory sind oder nicht ist abhängig von der implementation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;perform certain optimizations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, string literals &lt;strong&gt;do not&lt;/strong&gt; have the type array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const char&lt;/code&gt;,
    &lt;ul&gt;
      &lt;li&gt;in order to avoid the problems of pointer type checking, particularly with library functions, since assigning a pointer-to-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const char&lt;/code&gt; to a plain pointer-to-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; is not valid.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Those members of the Committee who insisted that string literals should be modifiable were content to have this practice designated a common extension (see F.5.5).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;faq---string-literals&quot;&gt;FAQ - string literals&lt;/h3&gt;

&lt;p&gt;Good example code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;see first two answers in &lt;a href=&quot;https://stackoverflow.com/questions/44294649/if-chars-are-read-only-why-can-i-overwrite-them&quot;&gt;If char*s are read only, why can I overwrite them?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;explains: &lt;a href=&quot;https://stackoverflow.com/questions/3843446/static-c-string-allocation-question&quot;&gt;char *str and char str[] are not the same&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;a href=&quot;https://stackoverflow.com/a/62279000&quot;&gt;this stackoverflow answer&lt;/a&gt; is wrong!
        &lt;ul&gt;
          &lt;li&gt;proof: see below: comment by &lt;a href=&quot;https://stackoverflow.com/users/12139179/roberts-supports-monica-cellio&quot;&gt;RobertS supports Monica Cellio&lt;/a&gt;, 13949 reputation: “‘Short answer: they are basically the same.’ - No, they aren’t. Both methods are completely different.”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;the same from a compiler perspective: &lt;a href=&quot;https://stackoverflow.com/questions/17337825/why-string-is-not-modifiable-in-new-compilers&quot;&gt;Why string is not modifiable in new compilers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-strings-as-char-arrays&quot;&gt;Create Strings as char arrays&lt;/h2&gt;

&lt;p&gt;element-by-element:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;using string literal:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alabama&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Great Caesar&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s Ghost!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;use &lt;strong&gt;double quotes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The array’s name is a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; pointer to the beginning of the string&lt;/li&gt;
  &lt;li&gt;the compiler calculates the size of the array for you, if no subscript is provided
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: The expression within the brackets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; is referred to as a &lt;strong&gt;subscript&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the compiler &lt;strong&gt;automatically&lt;/strong&gt; adds the terminating null character at the end of the string&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-strings-without-arrays&quot;&gt;Create Strings without arrays&lt;/h2&gt;

&lt;h3 id=&quot;allocate-string-space-at-compilation&quot;&gt;Allocate string space at compilation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;static memory allocation&lt;/strong&gt;: explicitly allocating memory in the program source code by declaring variables, structures, and arrays&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Great Caesar&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s Ghost!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;del&gt;i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*message&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message[]&lt;/code&gt; are equivalent!&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wrong: &lt;a href=&quot;https://stackoverflow.com/questions/3843446/static-c-string-allocation-question&quot;&gt;why they are different&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*message&lt;/code&gt; itself is stored at a different location than the literal string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Great Caesar\'s Ghost!&quot;&lt;/code&gt; (see section &lt;a href=&quot;#pointer&quot;&gt;Pointer&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;The array’s name is a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; pointer to the beginning of the string&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;allocate-string-space-at-runtime-malloc&quot;&gt;Allocate string space at runtime (malloc)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;dynamic memory allocation&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* allocate memory for a 100-character string */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not enough memory to allocate buffer&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;String was allocated!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *malloc()&lt;/code&gt; is typecast so that its return value is the proper type - a pointer to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; variable. Further details about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; are under section &lt;a href=&quot;#memory&quot;&gt;Memory&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;pointer&quot;&gt;Pointer&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The address of a variable is actually the address of the first (lowest) byte it occupies&lt;/li&gt;
  &lt;li&gt;Each pointer is equal to the address of the first byte of the pointed-to variable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;size-of-pointers&quot;&gt;Size of pointers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The size of a pointer in C/C++ depends upon different issues like Operating system, CPU architecture etc.&lt;/li&gt;
  &lt;li&gt;Usually it depends upon the &lt;strong&gt;word size of underlying processor&lt;/strong&gt;, for example
    &lt;ul&gt;
      &lt;li&gt;for a &lt;strong&gt;32 bit computer&lt;/strong&gt; the pointer size can be &lt;strong&gt;4 bytes&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;for a &lt;strong&gt;64 bit computer&lt;/strong&gt; the pointer size can be &lt;strong&gt;8 bytes&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;So, &lt;strong&gt;for a specific architecture&lt;/strong&gt; pointer size &lt;strong&gt;will be fixed&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;It is &lt;strong&gt;common to all data types&lt;/strong&gt; like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int *&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float *&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-type-of-pointers&quot;&gt;Data type of pointers&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/a/26976670&quot;&gt;stackoverflow&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;But really, what is a type? The gist of it is that a type is a way to determine how data in memory is supposed to be interpreted. A variable of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; represents a character. A variable of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; represents an integer. Same applies to pointers: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *x&lt;/code&gt; is not of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;, it’s of the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *&lt;/code&gt; (pointer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;). This means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *x&lt;/code&gt; itself is a location in memory we can use to read one or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; values.&lt;/li&gt;
  &lt;li&gt;TL;TR: Yes, a pointer is a data type (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *&lt;/code&gt; in its purest form). The pure form is quite unusable (because you can’t dereference it). Instead of having to cast the pointer every time you decide to use it, C offers the convenience of derived pointer types (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char *&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int *&lt;/code&gt; and so on). But really, they’re pointers, and therefore a data-type in their own right.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-is-a-pointer-stored&quot;&gt;Where is a pointer stored?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;a pointer can be stored &lt;strong&gt;anywhere&lt;/strong&gt; in the process’ &lt;strong&gt;virtual memory&lt;/strong&gt; (aka address space) which is typically organized in &lt;strong&gt;6 sections&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;environment section - used to store environment variables and command line arguments;&lt;/li&gt;
      &lt;li&gt;the stack, used to store memory for function arguments, return values, and &lt;strong&gt;automatic&lt;/strong&gt; variables;&lt;/li&gt;
      &lt;li&gt;the heap (free store) used for dynamic allocation,&lt;/li&gt;
      &lt;li&gt;data section for uninitialized &lt;strong&gt;static&lt;/strong&gt; and global variables&lt;/li&gt;
      &lt;li&gt;data section for initialized &lt;strong&gt;static&lt;/strong&gt; and global variables&lt;/li&gt;
      &lt;li&gt;a text section where the actual code is kept&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;more precisely&lt;/strong&gt;: from &lt;a href=&quot;https://www.cprogramming.com/tutorial/virtual_memory_and_heaps.html&quot;&gt;cprogramming.com&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;The size of the &lt;strong&gt;virtual memory&lt;/strong&gt; is the maximum size of the maximum size your computer can address using &lt;strong&gt;pointers&lt;/strong&gt; (usually on a 32-bit processor each process can address 4 GB of memory).&lt;/li&gt;
      &lt;li&gt;Typically, in each process, the virtual memory available to that process is called its &lt;strong&gt;address space&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Even though every application has its own 4 GB (on 32-bit systems) of virtual memory, that does not necessarily mean that your program can actually use all of that memory.
        &lt;ul&gt;
          &lt;li&gt;On &lt;strong&gt;Windows&lt;/strong&gt;, the upper 2 GB of that memory are allocated to the operating system kernel, and are unavailable to the process.
            &lt;ul&gt;
              &lt;li&gt;(Therefore, any pointer starting with 0x8xxxxxxx is unavailable in user space.)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;On &lt;strong&gt;Linux&lt;/strong&gt;, the upper 1 GB is kernel address space&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/24381621&quot;&gt;stackoverflow&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;a pointer can be created in any of these &lt;a href=&quot;https://devdocs.io/c/language/storage_duration&quot;&gt;storage classes&lt;/a&gt;; and objects being pointed to can also be in any of these storage classes&lt;/li&gt;
      &lt;li&gt;Roughly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; corresponds to “heap”, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automatic&lt;/code&gt; corresponds to “stack”.
        &lt;ul&gt;
          &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; dynamically allocates memory from the heap&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;void-pointer&quot;&gt;void pointer&lt;/h2&gt;

&lt;h3 id=&quot;in-c&quot;&gt;In C++&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.learncpp.com/cpp-tutorial/void-pointers/&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A void pointer can point to objects of any data type:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// valid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// valid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// valid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, because the void pointer does not know what type of object it is pointing to, dereferencing a void pointer is illegal. Instead, the void pointer must first be cast to another pointer type before the dereference can be performed.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voidPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// std::cout &amp;lt;&amp;lt; *voidPtr &amp;lt;&amp;lt; '\n'; // illegal: dereference of void pointer&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// however, if we cast our void pointer to an int pointer...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// then we can dereference the result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;null-pointer&quot;&gt;NULL pointer&lt;/h2&gt;

&lt;p&gt;Definition:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define NULL ( (void *) 0)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;C11 standard&lt;/strong&gt; definition:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An integer constant expression with the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, or such an expression cast to type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *&lt;/code&gt;, is called a &lt;strong&gt;null pointer constant&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If a null pointer constant is converted to a pointer type, the resulting pointer, called a &lt;strong&gt;null pointer&lt;/strong&gt;, is guaranteed to compare unequal to a pointer to any object or function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;To initialize a pointer variable when that pointer variable hasn’t been assigned any valid memory address yet.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To check for a null pointer before accessing any pointer variable. By doing so, we can perform error handling in pointer related code, e.g., dereference a pointer variable only if it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* We could use if(pInt) as well */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
 &lt;span class=&quot;cm&quot;&gt;/* Some code */&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
 &lt;span class=&quot;cm&quot;&gt;/* Some code */&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To pass a null pointer to a function argument when we don’t want to pass any valid memory address.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*Fun specific stuff is done with ptr here*/&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;difference-between-a-void-pointer-and-a-null-pointer&quot;&gt;Difference between a void pointer and a NULL pointer?&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/a/4116332&quot;&gt;stackoverflow&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;In C, there is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; pointer.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; is absence of type. I.E. a function returning a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; type is a function that returns nothing.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer: is a pointer to a memory location whose type can be anything: a structure, an int, a float, you name it.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; pointer is a pointer to location &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;, that is, no location. Pointing to nothing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// malloc is a function that could return a pointer to anything&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; pointer:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// s pointer points to nowhere (nothing)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pointer-arithmetic&quot;&gt;Pointer arithmetic&lt;/h2&gt;

&lt;p&gt;If you have a pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt; that points to a data object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;has the same effect as&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;address-of-a-pointer--multiple-indirection&quot;&gt;Address of a pointer / multiple indirection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;multiple indirection&lt;/strong&gt;: You can use the address-of operator to find the address of a pointer, so you can have &lt;strong&gt;pointers to pointers&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;The most common use involves &lt;strong&gt;arrays of pointers&lt;/strong&gt;.
        &lt;ul&gt;
          &lt;li&gt;The most common use of an array of pointers is with &lt;strong&gt;strings&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;passing-function-arguments&quot;&gt;Passing Function arguments&lt;/h2&gt;

&lt;p&gt;Using “passing by reference” (coll.) we can overcome two limitations of functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Arguments are passed by value, and&lt;/li&gt;
  &lt;li&gt;the return statement can return only one value&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structs&quot;&gt;Structs&lt;/h1&gt;

&lt;h2 id=&quot;3-ways-to-access-a-structure-member&quot;&gt;3 ways to access a structure member&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using the structure name&lt;/li&gt;
  &lt;li&gt;Using a pointer to the structure with the indirection operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Using a pointer to the structure with the indirect membership operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;sometimes called “structure pointer operator”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_str&lt;/code&gt; is a pointer to the structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memb&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;are equivalent.&lt;/p&gt;

&lt;h2 id=&quot;typedef&quot;&gt;typedef&lt;/h2&gt;

&lt;p&gt;Whether you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typedef&lt;/code&gt; or a structure tag to declare structures makes little difference&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or using a structure tag&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;type-conversions&quot;&gt;Type Conversions&lt;/h1&gt;

&lt;h2 id=&quot;type-promotion-implicit-conversion-automatic-conversion&quot;&gt;Type Promotion (implicit conversion, automatic conversion)&lt;/h2&gt;

&lt;p&gt;If the components of an expression have different types, an expression has the same type as its &lt;strong&gt;most comprehensive component&lt;/strong&gt;. From least-comprehensive to most-comprehensive, the numerical data types are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;char&lt;/li&gt;
  &lt;li&gt;short&lt;/li&gt;
  &lt;li&gt;int&lt;/li&gt;
  &lt;li&gt;long&lt;/li&gt;
  &lt;li&gt;long long&lt;/li&gt;
  &lt;li&gt;float&lt;/li&gt;
  &lt;li&gt;double&lt;/li&gt;
  &lt;li&gt;long double&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Promotion means that a copy of the variable is created and used in the expression evaluation. The type of the variable is &lt;strong&gt;not&lt;/strong&gt; changed!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promotion by Assignment&lt;/strong&gt;: expression on the right side of an assignment statement is always promoted to the type of the data object on the left side of the assignment operator&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;may cause &lt;strong&gt;demotion&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; (&lt;strong&gt;Caution&lt;/strong&gt;: fractional part is lost!)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cast--typecast-explicit-conversion&quot;&gt;Cast / Typecast (explicit conversion)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(float)i&lt;/code&gt; when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; is an integer&lt;/li&gt;
  &lt;li&gt;can be performed on &lt;strong&gt;arithmetic expressions&lt;/strong&gt; and &lt;strong&gt;pointers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;makes an internal &lt;strong&gt;copy&lt;/strong&gt; of the variable using the new type (similar to promotion)&lt;/li&gt;
  &lt;li&gt;most common use: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f1 = (float)i1/i2;&lt;/code&gt; to avoid using the fractional part in an integer division
    &lt;ul&gt;
      &lt;li&gt;casting one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; variables is sufficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;casting &lt;strong&gt;pointers&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Before you can use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer, you &lt;strong&gt;must cast&lt;/strong&gt; it to the proper type&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;don’t&lt;/strong&gt; need to cast &lt;strong&gt;any&lt;/strong&gt; pointer
        &lt;ul&gt;
          &lt;li&gt;in order to assign a value to it&lt;/li&gt;
          &lt;li&gt;to compare it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;must&lt;/strong&gt; cast a pointer
        &lt;ul&gt;
          &lt;li&gt;before dereferencing&lt;/li&gt;
          &lt;li&gt;before performing pointer arithmetic with it&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;memory&quot;&gt;Memory&lt;/h1&gt;

&lt;h2 id=&quot;monitoring-of-memory&quot;&gt;Monitoring of memory&lt;/h2&gt;

&lt;p&gt;Read &lt;a href=&quot;https://www.linuxatemyram.com/#when-should-i-start-to-worry&quot;&gt;How do I see how much free ram I really have?&lt;/a&gt; first! Also read section “When should I start to worry?”!&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;watch free &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bad-signs&quot;&gt;Bad signs&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dmesg &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;oom-killer
&lt;span class=&quot;c&quot;&gt;# same as&lt;/span&gt;
dmesg &lt;span class=&quot;nt&quot;&gt;--ctime&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;oom-killer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;should not show any output! If it does, it is a bad sign!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-T&lt;/code&gt; (same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ctime&lt;/code&gt;) flag is used to print human-readable timestamps
    &lt;ul&gt;
      &lt;li&gt;Be aware that the timestamp could be inaccurate! (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man dmesg&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;areas-of-memory&quot;&gt;Areas of memory&lt;/h2&gt;

&lt;p&gt;When a program begins the operating system sets up following areas of memory (depending on the requirements of the compiler):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;registers,&lt;/li&gt;
  &lt;li&gt;code space,&lt;/li&gt;
  &lt;li&gt;stack,&lt;/li&gt;
  &lt;li&gt;global namespace, and&lt;/li&gt;
  &lt;li&gt;free store (heap)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;registers&quot;&gt;Registers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;area of memory built right into the CPU&lt;/li&gt;
  &lt;li&gt;important registers:
    &lt;ul&gt;
      &lt;li&gt;instruction pointer
        &lt;ul&gt;
          &lt;li&gt;set of registers responsible for pointing, at any given moment, to the next line of code&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stack pointer (see &lt;a href=&quot;#stack&quot;&gt;section “stack”&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;frame pointer (see &lt;a href=&quot;#stack&quot;&gt;section “stack”&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;code-space&quot;&gt;Code space&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;memory set aside to hold the binary form of the instructions you created in your program&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;area of memory allocated for your program to hold the data required by each of the functions in your program&lt;/li&gt;
  &lt;li&gt;last-in, first-out
    &lt;ul&gt;
      &lt;li&gt;data is &lt;strong&gt;pushed&lt;/strong&gt; onto the stack and &lt;strong&gt;popped&lt;/strong&gt; off the stack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setrlimit()&lt;/code&gt;: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_STACK&lt;/code&gt; &lt;a href=&quot;/notes/notes-OS/#resource-limits&quot;&gt;resource limit&lt;/a&gt; to limit the stack size
    &lt;ul&gt;
      &lt;li&gt;If you exceed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_STACK&lt;/code&gt; limit (call stack too deep, or allocate too many variables on the stack), your program will receive a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGSEGV&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;stack pointer
    &lt;ul&gt;
      &lt;li&gt;analogy: series of cubbyholes
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;the top of the stack&lt;/strong&gt;: whatever cubby the stack pointer (which is another register) happens to be pointing to&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;sequential address&lt;/strong&gt;: Each of the cubbies has a sequential address&lt;/li&gt;
          &lt;li&gt;one of those sequential addresses is kept in the stack pointer register (i.e. the top of the stack)&lt;/li&gt;
          &lt;li&gt;Everything &lt;strong&gt;below that magic address&lt;/strong&gt;, known as the top of the stack, is considered to be &lt;strong&gt;on the stack&lt;/strong&gt;.&lt;/li&gt;
          &lt;li&gt;Everything &lt;strong&gt;above the top of the stack&lt;/strong&gt; is considered to be &lt;strong&gt;off the stack and invalid&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;when data is popped off the stack the stack pointer is moved down the stack
        &lt;ul&gt;
          &lt;li&gt;the data above the stack pointer is called &lt;strong&gt;garbage&lt;/strong&gt; and is &lt;strong&gt;not reliable&lt;/strong&gt; (it might or might not be changed at any time!)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;function-calls-stack-pointer-esp-and-frame-pointer-ebp&quot;&gt;Function Calls: Stack Pointer (ESP) and Frame Pointer (EBP)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.uninformativ.de/blog/postings/2011-04-02/0/POSTING-de.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Der Knackpunkt ist das Register &lt;strong&gt;ESP&lt;/strong&gt; (SP = &lt;strong&gt;Stack Pointer&lt;/strong&gt;). Dieses enthält die Speicheradresse, die auf das letzte Element auf dem Stack zeigt.&lt;/p&gt;

&lt;p&gt;(…), aber schöner wäre es, wenn ich mir irgendwo diejenige Speicheradresse merken könnte, die den “Anfang” des Stacks kennzeichnet.&lt;/p&gt;

&lt;p&gt;Das ist die Idee des “&lt;strong&gt;Frame Pointers&lt;/strong&gt;” oder “Base Pointers”. Dafür wird normalerweise das Register &lt;strong&gt;EBP&lt;/strong&gt; (BP = Base Pointer) verwendet. Ich muss mich allerdings selbst darum kümmern. Die gängige Vorgehensweise ist, beim Betritt einer “Funktion”&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;den alten Wert von EBP auf dem Stack zu speichern und dann&lt;/li&gt;
  &lt;li&gt;den aktuellen Wert von ESP nach EBP zu kopieren.&lt;/li&gt;
  &lt;li&gt;Danach kann ich ESP “beliebig” verändern und habe dennoch mit EBP immer einen festen Referenzpunkt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verlasse ich die Funktion wieder, muss ich natürlich aufräumen. Dies erreicht man, indem man&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;EBP zurück nach ESP kopiert und dann&lt;/li&gt;
  &lt;li&gt;den ehemals gespeicherten EBP-Wert vom Stack zurück nach EBP holt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Genaueres weiter unten in &lt;a href=&quot;https://www.uninformativ.de/blog/postings/2011-04-02/0/POSTING-de.html&quot;&gt;source&lt;/a&gt; ab “Richtig interessant wird der Frame Pointer, wenn man Funktionen aufrufen möchte. (…)”.&lt;/p&gt;

&lt;p&gt;Other references:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21718397/what-are-the-esp-and-the-ebp-registers&quot;&gt;What are the ESP and the EBP registers?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definitions (from &lt;a href=&quot;https://people.cs.rutgers.edu/~pxk/419/notes/frames.html&quot;&gt;cs.rutgers.edu&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;stack frame&lt;/strong&gt;: Each &lt;strong&gt;function&lt;/strong&gt; has local memory associated with it to hold incoming parameters, local variables, and (in some cases) temporary variables. This region of memory is called a &lt;strong&gt;stack frame&lt;/strong&gt; and is allocated on the process’ stack.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;frame pointer&lt;/strong&gt;: A &lt;strong&gt;frame pointer&lt;/strong&gt; (the &lt;strong&gt;ebp register&lt;/strong&gt; on intel x86 architectures, &lt;strong&gt;rbp&lt;/strong&gt; on 64-bit architectures) contains the base address of the function’s frame. The code to access local variables within a function is generated in terms of offsets to the frame pointer.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;strong&gt;stack pointer&lt;/strong&gt; (the &lt;strong&gt;esp register&lt;/strong&gt; on intel x86 architectures or &lt;strong&gt;rsp&lt;/strong&gt; on 64-bit architectures) may change during the execution of a function as values are pushed or popped off the stack (such as pushing parameters in preparation to calling another function). The frame pointer doesn’t change throughout the function.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;stack-overflow&quot;&gt;Stack Overflow&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_overflow&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A stack overflow occurs if the &lt;strong&gt;call stack pointer&lt;/strong&gt; (ESP, see above) exceeds the stack bound.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Causes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Infinite recursion&lt;/strong&gt; (most common cause of stack overflows):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;space needed to store the variables and information associated with each call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo()&lt;/code&gt; invokes itself until the stack overflows resulting in a &lt;a href=&quot;#segmentation-fault&quot;&gt;segmentation fault&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGSEGV&lt;/code&gt; in UNIX, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATUS_ACCESS_VIOLATION&lt;/code&gt; exception in Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Very Deep Recursion&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a recursive function that terminates in theory but causes a call stack buffer overflow in practice
    &lt;ul&gt;
      &lt;li&gt;fix by transforming the recursion into a loop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Very large stack variables&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;attempt to allocate more memory on the stack than will fit, e.g. by creating local array variables that are too large
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1048576&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;global-namespace&quot;&gt;Global namespace&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;global variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;free-store-heap&quot;&gt;Free store (Heap)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;read: &lt;a href=&quot;https://www.cprogramming.com/tutorial/virtual_memory_and_heaps.html&quot;&gt;virtual memory vs. heap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;in C++&lt;/strong&gt;: You allocate memory on the free store in C++ by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;limiting-the-heap-size&quot;&gt;Limiting the heap size&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;: In the source code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setrlimit()&lt;/code&gt;: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_DATA&lt;/code&gt; &lt;a href=&quot;/notes/notes-OS/#resource-limits&quot;&gt;resource limit&lt;/a&gt; to limit the &lt;strong&gt;data segment&lt;/strong&gt; (i.e. initialized data, uninitialized data, and &lt;strong&gt;heap&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;If you try to extend the &lt;strong&gt;data segment&lt;/strong&gt; past the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_DATA&lt;/code&gt; limit (e.g. using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk&lt;/code&gt; or some intermediary like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt;), the attempt will fail. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brk&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk&lt;/code&gt; will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt; 0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; will return a null pointer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; allocates memory from the &lt;strong&gt;heap&lt;/strong&gt; (calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk()&lt;/code&gt; to adjust heap size, if necessary):
        &lt;blockquote&gt;
          &lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man3/malloc.3.html&quot;&gt;malloc doc&lt;/a&gt;: Normally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; allocates memory from the heap, and adjusts the size of the heap as required, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbrk(2)&lt;/code&gt;.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;only if&lt;/strong&gt; memory blocks larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MMAP_THRESHOLD&lt;/code&gt; are allocated, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap()&lt;/code&gt; system call (which creates mappings in &lt;strong&gt;virtual memory&lt;/strong&gt;):
        &lt;blockquote&gt;
          &lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man3/malloc.3.html&quot;&gt;malloc doc&lt;/a&gt;: When allocating blocks of memory larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MMAP_THRESHOLD&lt;/code&gt; bytes, the glibc &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; implementation allocates the memory as a private anonymous mapping using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap(2)&lt;/code&gt;.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;in order to limit the available memory for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_DATA&lt;/code&gt;:
        &lt;blockquote&gt;
          &lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man3/malloc.3.html&quot;&gt;malloc doc&lt;/a&gt;: Prior to Linux 4.7 allocations performed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap(2)&lt;/code&gt; were unaffected by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIMIT_DATA&lt;/code&gt; resource limit; since Linux 4.7, this limit is also enforced for allocations performed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap(2)&lt;/code&gt;.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; session, where the program will be executed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit -Sd kiloBytes&lt;/code&gt; to limit the program’s data segment! (Note: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kiloBytes&lt;/code&gt; must be sufficiently large, i.e. approx. $\gt 3000$ kiloBytes!)&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit -Sv kiloBytes&lt;/code&gt; to limit the program’s virtual memory (address space)! (Note: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kiloBytes&lt;/code&gt; must be sufficiently large, i.e. approx. $\gt 3000$ kiloBytes!)
    &lt;ul&gt;
      &lt;li&gt;limiting the entire virtual memory also limits the heap!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ram-available-for-allocation&quot;&gt;RAM available for allocation&lt;/h2&gt;

&lt;p&gt;When you run a C program, the program is loaded from disk into the computer’s memory. The memory space the program occupies includes the &lt;strong&gt;program code&lt;/strong&gt;, as well as space for all the program’s &lt;strong&gt;static data&lt;/strong&gt; - that is, data items that are declared in the source code. &lt;strong&gt;The memory left over is what’s available for allocation.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-vs-dynamic-memory-allocation&quot;&gt;Static vs. Dynamic Memory Allocation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://techdifferences.com/difference-between-static-and-dynamic-memory-allocation.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-memory-allocation&quot;&gt;Static Memory Allocation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Static memory allocation is a technique where the computer assigns memory to the program &lt;strong&gt;during its compilation&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Memory once assigned &lt;strong&gt;cannot vary in size&lt;/strong&gt;, i.e. you can not increase or decrease the allocated memory size.&lt;/li&gt;
  &lt;li&gt;Once assigned to the program, the static memory remains throughout the program, i.e. from the moment the program is compiled upto the moment the program completes its execution. After the program executes completely, the memory is deallocated, and it can be allocated to some other entity.&lt;/li&gt;
  &lt;li&gt;This technique allocates the memory to the program &lt;strong&gt;from the stack&lt;/strong&gt; storage.&lt;/li&gt;
  &lt;li&gt;In static memory allocation, the program &lt;strong&gt;executes faster&lt;/strong&gt; because the memory is assigned to the program before its execution.
    &lt;ul&gt;
      &lt;li&gt;But it is quite difficult to determine how much memory would be required to run the program, and hence most of the time, memory allocation decisions are to be taken at the run time (see &lt;a href=&quot;#dynamic-memory-allocation&quot;&gt;Dynamic Memory Allocation&lt;/a&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dynamic-memory-allocation&quot;&gt;Dynamic Memory Allocation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In dynamic memory allocation, the memory is allocated &lt;strong&gt;at the run time&lt;/strong&gt;, i.e. when the programmer executes the program&lt;/li&gt;
  &lt;li&gt;this technique assigns the memory &lt;strong&gt;from the heap&lt;/strong&gt; storage.&lt;/li&gt;
  &lt;li&gt;The memory allocated dynamically can be deallocated at any moment during the program execution.&lt;/li&gt;
  &lt;li&gt;Even the memory allocated &lt;strong&gt;can be resized&lt;/strong&gt;, i.e. you can increase or decrease the memory size.
    &lt;ul&gt;
      &lt;li&gt;This method is more efficient as it provides the memory space according to the program’s needs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As the memory is allocated at the run time, this makes an &lt;strong&gt;execution a little slower&lt;/strong&gt; when compared to static memory allocation.&lt;/li&gt;
  &lt;li&gt;The functions used to allocate and deallocate the memory dynamically are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calloc()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realloc()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;allocation-functions&quot;&gt;Allocation Functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;all allocation functions return a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer
    &lt;ul&gt;
      &lt;li&gt;a type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer must be cast to the appropriate type before being used (see section “Cast”)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When a memory allocation function is called, you &lt;strong&gt;must check its return value&lt;/strong&gt; to ensure that the memory was allocated successfully.&lt;/li&gt;
  &lt;li&gt;In addition, your programs must be able to &lt;strong&gt;gracefully handle the situation when a memory allocation request fails&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;malloc-stdlibh&quot;&gt;malloc (stdlib.h)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;allocates a group of bytes&lt;/li&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *malloc(size_t num);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;returns a pointer to the first byte&lt;/li&gt;
  &lt;li&gt;returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;if the requested storage space couldn’t be allocated or&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num == 0&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;calloc-stdlibh&quot;&gt;calloc (stdlib.h)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;allocates a group of objects&lt;/li&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *calloc(size_t num, size_t size);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;returns a pointer to the first byte&lt;/li&gt;
  &lt;li&gt;clears all the allocated memory (set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;if the requested storage space couldn’t be allocated or&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num == 0&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size == 0&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;realloc-stdlibh&quot;&gt;realloc (stdlib.h)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;changes the size of a block of memory that was previously allocated with or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calloc()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *realloc(void *ptr, size_t size);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;expand block:
    &lt;ul&gt;
      &lt;li&gt;if sufficient space exists: expand &lt;strong&gt;old&lt;/strong&gt; block, return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;if sufficient space &lt;strong&gt;does not&lt;/strong&gt; exist: allocate a &lt;strong&gt;new&lt;/strong&gt; block, copy data to &lt;strong&gt;new&lt;/strong&gt; block, free &lt;strong&gt;old&lt;/strong&gt; block, return a pointer to the new block&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr == NULL&lt;/code&gt;: like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size == 0&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free(ptr)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if memory is insufficient: leave &lt;strong&gt;old&lt;/strong&gt; block unchanged&lt;/li&gt;
  &lt;li&gt;returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;if memory is insufficient (either for expanding the &lt;strong&gt;old&lt;/strong&gt; block or for allocating a &lt;strong&gt;new&lt;/strong&gt; one)&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size == 0&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deallocation&quot;&gt;Deallocation&lt;/h2&gt;

&lt;h3 id=&quot;free-stdlibh&quot;&gt;free (stdlib.h)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;releases the memory pointed to by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;prototype: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void free(void *ptr);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;must have been allocated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calloc()&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realloc()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt; does nothing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;realloc-stdlibh-1&quot;&gt;realloc (stdlib.h)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;If the argument size is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, the memory that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptr&lt;/code&gt; points to is freed, and the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;manipulation&quot;&gt;Manipulation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memset()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memmove()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heap-overflow&quot;&gt;Heap Overflow&lt;/h2&gt;

&lt;p&gt;from &lt;a href=&quot;https://en.wikipedia.org/wiki/Heap_overflow&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An accidental overflow may result in data corruption or unexpected behavior by any process that accesses the affected memory area.
    &lt;ul&gt;
      &lt;li&gt;On operating systems &lt;strong&gt;without&lt;/strong&gt; memory protection, this could be any process on the system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exploitation-vulnerability&quot;&gt;Exploitation, Vulnerability&lt;/h3&gt;

&lt;p&gt;from &lt;a href=&quot;https://en.wikipedia.org/wiki/Heap_overflow&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Memory on the heap is dynamically allocated at runtime and typically &lt;strong&gt;contains program data&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Exploitation is performed by corrupting this data in specific ways to cause the application to overwrite internal structures such as &lt;strong&gt;linked list pointers&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The canonical &lt;strong&gt;heap overflow technique&lt;/strong&gt; overwrites dynamic memory allocation linkage (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; metadata) and uses the resulting pointer exchange to overwrite a program function pointer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;iOS jailbreaking&lt;/strong&gt; often uses heap overflows to gain arbitrary code execution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UAF&lt;/strong&gt;: see &lt;a href=&quot;https://encyclopedia.kaspersky.com/glossary/use-after-free/&quot;&gt;Use-After-Free Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;segmentation-fault&quot;&gt;Segmentation Fault&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Segmentation_fault&quot;&gt;from Wikipedia&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;On standard x86 computers, this is a form of &lt;strong&gt;general protection fault&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;The &lt;strong&gt;operating system kernel&lt;/strong&gt; will, in response, usually perform some &lt;strong&gt;corrective action&lt;/strong&gt;, generally passing the fault on to the offending process by sending the process a signal.&lt;/li&gt;
      &lt;li&gt;Processes can in some cases install &lt;strong&gt;a custom signal handler&lt;/strong&gt;, allowing them to recover on their own, but otherwise &lt;strong&gt;the OS default signal handler&lt;/strong&gt; is used, generally causing &lt;strong&gt;abnormal termination&lt;/strong&gt; of the process (a &lt;strong&gt;program crash&lt;/strong&gt;), and sometimes a &lt;strong&gt;core dump&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/14367598&quot;&gt;from stackoverflow&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;Segmentation faults don’t directly have anything to do with the heap. The term segmentation fault comes from older operating systems (Unix-style) that used “segments” of memory for different usages, and “Segmentation fault” was when the program went outside it’s allocated segment. In modern systems, the memory is split into “pages” - typically 4KB each, but some processors have larger pages, and many modern processors support “large pages” of, for examble, 2MB or 1GB, which is used for large chunks of memory.&lt;/li&gt;
      &lt;li&gt;Now, if you use an address that points to a page that isn’t there (or isn’t “yours”), you get a segmentation fault. This, typically will end the application then and there. You can “trap” segmentation fault, but in all operating systems I’m aware of, it’s not valid to try to continue from this “trap” - but you could for example store away some files to explain what happened and help troubleshoot the problem later, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linked-list&quot;&gt;Linked List&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;TODO&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="c" /><category term="notes" /><summary type="html">For learning C. Content mostly from Bradley L. Jones, Peter Aitken - Sams Teach Yourself C in 21 Days -Sams (2002).</summary></entry><entry><title type="html">Embedded Systems</title><link href="http://localhost:4000/emsys/notes/notes-EmSys/" rel="alternate" type="text/html" title="Embedded Systems" /><published>2022-05-30T00:00:00+02:00</published><updated>2022-05-30T00:00:00+02:00</updated><id>http://localhost:4000/emsys/notes/notes-EmSys</id><content type="html" xml:base="http://localhost:4000/emsys/notes/notes-EmSys/">&lt;h1 id=&quot;microcontroller&quot;&gt;Microcontroller&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;µC $\approx$ low-end microprocessor + memory + I/O + additional peripherals&lt;/li&gt;
  &lt;li&gt;more general than ASIPs and SoCs&lt;/li&gt;
  &lt;li&gt;Pentium Processor &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentium_FDIV_bug&quot;&gt;FDIV Bug&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/Pentium-FDIV-Bug&quot;&gt;FDIV Bug deutsch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;see &lt;a href=&quot;https://www.heise.de/hintergrund/Die-ersten-25-Jahre-in-der-Geschichte-der-Mikroprozessoren-4981272.html?seite=4&quot;&gt;history of microprocessors&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;modern µCs nowadays may have more than one microprocessor core&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;structure-of-a-microcontroller&quot;&gt;Structure of a microcontroller&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Clock
    &lt;ul&gt;
      &lt;li&gt;clocks that use an electronic oscillator regulated by a quartz crystal to keep time&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Crystal_oscillator&quot;&gt;crystal oscillator Schaltzeichen&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Volatile mem (SRAM) “Flüchtiger Speicher”
    &lt;ul&gt;
      &lt;li&gt;is deleted, when voltage is turned off&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Non-Volatile mem (EEPROM, Flash)
    &lt;ul&gt;
      &lt;li&gt;is stored permanently, even if voltage is turned off&lt;/li&gt;
      &lt;li&gt;different technology than RAM: you cannot write, erase and overwrite as often as you can with RAM
        &lt;ul&gt;
          &lt;li&gt;a car’s control devices’ µCs are overwritten or erased only very rarely&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;for PCs: BIOS is stored in a ROM chip
        &lt;ul&gt;
          &lt;li&gt;if you turn on your PC and the PC boots, then first the boot program is loaded from the BIOS into the RAM. After that the OS takes over. From then on all the interesting stuff happens in the RAM.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;for EmSys/microcontrollers: non-volatile mem plays a much bigger role because you don’t have a HDD/SSD or an internet connection over which you could load any programs. Usually e.g. a motor control µC ships with the software stored in the EEPROM/flash memory. When the motor control µC boots this software is loaded into the RAM and the software execution also happens in the RAM. The EEPROM/Flash mem is also where the control parameters are stored, i.e. the characteristic curve, lookup tables, etc.. This is why the size of EEPROM/Flash mem compared to RAM is much higher for µCs than for PCs.
        &lt;ul&gt;
          &lt;li&gt;e.g. if you bring a car to the inspection, the control algorithms are updated, i.e. the control devices are flashed, bugs are fixed, new functions are added or improved, etc. The car workshops only have to deal with the non-volatile mem. They have test equiqment with which they can access the car’s network. They get a CD or DVD from the car’s manufacturer and install the new software on the car’s control devices.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;serial interface
    &lt;ul&gt;
      &lt;li&gt;RS-232&lt;/li&gt;
      &lt;li&gt;USB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bus controller
    &lt;ul&gt;
      &lt;li&gt;Bus interfaces: e.g.
        &lt;ul&gt;
          &lt;li&gt;CAN Bus&lt;/li&gt;
          &lt;li&gt;Ethernet (increasingly important in industry automation)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;D/A converters
    &lt;ul&gt;
      &lt;li&gt;e.g. in order to calculate a digital value with microprocessor, convert this value and then give an external motor an analog control signal&lt;/li&gt;
      &lt;li&gt;quick n dirty conversion: use a PWM signal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;digital-io-pins&quot;&gt;Digital I/O pins&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;to monitor and control external hardware&lt;/li&gt;
  &lt;li&gt;grouped into &lt;strong&gt;ports&lt;/strong&gt; of 8 pins (if 8-bit architecture)
    &lt;ul&gt;
      &lt;li&gt;bidirectional (i.e. can be used as input or output pins)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;monitoring, access and control of digital I/O pins via &lt;strong&gt;3 Registers for each port&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Data Direction (DDR) [Register consists of 8 bit]
        &lt;ul&gt;
          &lt;li&gt;the corresponding bits in the DDR Register specify if the corresponding pin is an input pin (0) or an output pin (1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Port (PORT) [8 bit, same name as corresponding pin group e.g. PORTA]
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;for output pins&lt;/strong&gt; the corresponding bits in the Port Register specify the output pins’ output values, i.e. high 5V (1) or low 0V (0)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;for input pins&lt;/strong&gt; the corresponding bits in the Port Register control &lt;strong&gt;pull-up resistors&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Port Input (PIN) [8 bit]
        &lt;ul&gt;
          &lt;li&gt;read only&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;for input pins&lt;/strong&gt; contains the current value (high or low)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;for output pins&lt;/strong&gt;: contains the same values as in PORT Registers (usually we do not need these values because we can read them from the PORT Registers)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pull-up-resistors&quot;&gt;Pull-up Resistors&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;example: reading a button&lt;/li&gt;
  &lt;li&gt;geöffneter Schalter/”Stück Draht in der Luft” $\Rightarrow$ &lt;strong&gt;Problem&lt;/strong&gt;: the voltage at the pin and therefore also the PIN Register bit corresponding to the (physical) pin will be undefined&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pull-up resistor&lt;/strong&gt; connected to VCC “pulls up” the (undefined) pin to 5V
    &lt;ul&gt;
      &lt;li&gt;allows the voltage to “collapse”, i.e. voltage behind the pull-up resistor is 0, &lt;strong&gt;if the button is pressed&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Note: voltage behind the pull-up resistor is VCC, &lt;strong&gt;if the button is not pressed&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bus-systems&quot;&gt;Bus Systems&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://automotive.softing.com/standards/bus-systems.html&quot;&gt;List&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CAN&lt;/li&gt;
      &lt;li&gt;CAN FD&lt;/li&gt;
      &lt;li&gt;FlexRay&lt;/li&gt;
      &lt;li&gt;Ethernet&lt;/li&gt;
      &lt;li&gt;K-Line&lt;/li&gt;
      &lt;li&gt;LIN&lt;/li&gt;
      &lt;li&gt;MOST&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="EmSys" /><category term="Notes" /><category term="emsys" /><category term="notes" /><summary type="html">Notes on Embedded Systems</summary></entry><entry><title type="html">Notes on Building Code</title><link href="http://localhost:4000/notes/build/notes-build/" rel="alternate" type="text/html" title="Notes on Building Code" /><published>2022-05-07T00:00:00+02:00</published><updated>2022-05-07T00:00:00+02:00</updated><id>http://localhost:4000/notes/build/notes-build</id><content type="html" xml:base="http://localhost:4000/notes/build/notes-build/">&lt;h1 id=&quot;configure-script&quot;&gt;configure Script&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Configure_script&quot;&gt;purpose of configure scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/edenhill/librdkafka/issues/370#issuecomment-142095337&quot;&gt;check “failed” warnings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pharath Palesuvaran</name></author><category term="Notes" /><category term="Build" /><category term="build" /><category term="notes" /><summary type="html">configure Script purpose of configure scripts check “failed” warnings</summary></entry></feed>